'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var extend = require('extend');

var abind = require('abind');

var isArrayKey = require('./key/is_array_key');

var fromArrayKey = require('./key/from_array_key');

var toArrayKey = require('./key/to_array_key');

var isRecursive = function isRecursive(value) {
  if (!value) {
    return false;
  }

  var reservedClasses = [Date];
  var isReservedClass = reservedClasses.some(function (C) {
    return value instanceof C;
  });

  if (isReservedClass) {
    return false;
  }

  switch ((0, _typeof2["default"])(value)) {
    case 'string':
    case 'number':
    case 'boolean':
    case 'function':
      return false;

    default:
      return true;
  }
};
/**
 * @memberOf module:objnest
 * @class Objnest
 * @param {object} config
 */


function Objnest(config) {
  Object.assign(this, config);
  abind(this);
}

Objnest.prototype = {
  separator: '.',

  /**
   * @function expand
   * @param {object} object - Obj to flatten
   * @returns {object} Flatten obj.
   * @example
   *  const obj = objnest.expand({
   *      'foo.bar': 'baz'
   *  })
   *  console.log(obj) // => {foo: {bar: 'baz'}}
   */
  expand: function expand(object) {
    var _this = this;

    if (Array.isArray(object)) {
      return object.map(function (object) {
        return _this.expand(object);
      });
    }

    if (!isRecursive(object)) {
      return object;
    }

    var separator = this.separator;
    var result = {};

    for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      var val = object[key];
      var needsSeparate = !!~key.indexOf(separator);

      if (needsSeparate) {
        var subKeys = key.split(separator);
        var firstSubKey = subKeys[0];

        if (firstSubKey === '__proto__' || firstSubKey === 'prototype' || firstSubKey === 'constructor') {
          continue;
        }

        var subObj = {};
        var thisKey = subKeys.shift();
        subObj[subKeys.join('.')] = val;
        var subExpandedObj = this.expand(subObj);
        var thisVal = result[thisKey];
        val = this._merge(thisVal, subExpandedObj);
        key = thisKey;
      }

      if (isArrayKey(key)) {
        var arrayKey = fromArrayKey(key);

        if (!result[arrayKey.name]) {
          var length = object["".concat(arrayKey.name, "[length]")] || 0;
          result[arrayKey.name] = new Array(length);
        }

        if (arrayKey.index !== null) {
          result[arrayKey.name][arrayKey.index] = this._merge(result[arrayKey.name][arrayKey.index], val);
        }
      } else {
        result[key] = val;
      }
    }

    return result;
  },

  /**
   * Flatten nested object.
   * @param {object} nested - Object to flatten.
   * @param {Object} [options={}]
   * @returns {object} - Flattened object.
   * @example
   *  const flattened = objnest.flatten({
   *      'foo': {'bar': 'baz'}
   *  })
   *  console.log(flattened) // => {'foo.bar': 'baz'}
   */
  flatten: function flatten(nested) {
    var _this2 = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var parent = options.parent;

    if (!isRecursive(nested)) {
      return nested;
    }

    var topLevelArray = Array.isArray(nested) && !parent;

    if (topLevelArray) {
      return nested.map(function (v) {
        return _this2.flatten(v);
      });
    }

    var separator = this.separator;
    var flattened = {};

    for (var _i2 = 0, _Object$keys2 = Object.keys(nested || {}); _i2 < _Object$keys2.length; _i2++) {
      var key = _Object$keys2[_i2];
      var value = nested[key];

      if (value === null) {
        flattened[key] = value;
        continue;
      }

      if (isRecursive(value)) {
        var subValues = this.flatten(value, {
          parent: nested
        });
        var isArray = Array.isArray(value);

        if (isArray) {
          flattened["".concat(key, "[length]")] = value.length;
        }

        for (var _i3 = 0, _Object$keys3 = Object.keys(subValues); _i3 < _Object$keys3.length; _i3++) {
          var subKey = _Object$keys3[_i3];
          var fullKey = void 0;

          if (isArray) {
            fullKey = key + toArrayKey(subKey);
          } else {
            fullKey = [key, subKey].join(separator);
          }

          flattened[fullKey] = subValues[subKey];
        }
      } else {
        flattened[key] = value;
      }
    }

    return flattened;
  },
  _merge: function _merge(v1, v2) {
    if (typeof v1 === 'undefined') {
      return v2;
    }

    if (typeof v2 === 'undefined') {
      return v1;
    }

    return extend(true, v1, v2 || {});
  }
};
module.exports = Objnest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,