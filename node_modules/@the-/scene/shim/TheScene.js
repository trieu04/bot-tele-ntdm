/**
 * @memberOf module:@the-/scene
 * @class TheScene
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var asobj = require('asobj');

var _require = require('./mixins'),
    errorMix = _require.errorMix,
    goMix = _require.goMix,
    subMix = _require.subMix;

var cleanup = asobj.cleanup;
var TheSceneMixed = [errorMix, goMix, subMix].reduce(function (Clazz, mix) {
  return mix(Clazz);
}, function Root() {
  (0, _classCallCheck2["default"])(this, Root);
});
/** @lends module:@the-/scene.TheScene */

var TheScene =
/*#__PURE__*/
function (_TheSceneMixed) {
  (0, _inherits2["default"])(TheScene, _TheSceneMixed);

  function TheScene() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, TheScene);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TheScene).call(this));
    Object.assign((0, _assertThisInitialized2["default"])(_this), props);
    _this.props = props;
    return _this;
  }

  (0, _createClass2["default"])(TheScene, [{
    key: "for",

    /** Alias for `this.subFor` */
    value: function _for() {
      return this.subFor.apply(this, arguments);
    }
    /** Alias for `this.scope.get` */

  }, {
    key: "get",
    value: function get(namepath) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$strict = options.strict,
          strict = _options$strict === void 0 ? false : _options$strict;

      this._assertScope();

      this._assertScopeNamepath(namepath);

      var result = this.scope.get(namepath);

      if (strict) {
        var isEmpty = typeof result === 'undefined' || result === null;

        if (isEmpty) {
          throw new Error("[".concat(this.name, "] ").concat(namepath, " is required"));
        }
      }

      return result;
    }
    /**
     * Check if value exists
     * @param {string} namepath
     * @returns {boolean}
     */

  }, {
    key: "has",
    value: function has(namepath) {
      this._assertScope();

      this._assertScopeNamepath(namepath);

      if (!this.scope.has(namepath)) {
        return false;
      }

      var value = this.scope.get(namepath);
      var empty = typeof value === 'undefined' || value === null;
      return !empty;
    }
    /** Alias for `this.scope.init` */

  }, {
    key: "init",
    value: function init() {
      var _this$scope;

      this._assertScope();

      for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
        names[_key] = arguments[_key];
      }

      (_this$scope = this.scope).init.apply(_this$scope, names);

      var _this$defaults = this.defaults,
          defaults = _this$defaults === void 0 ? {} : _this$defaults;

      if (names.length > 0) {
        this.set(cleanup(Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2["default"])(names.map(function (name) {
          return (0, _defineProperty2["default"])({}, name, defaults[name]);
        }))))));
      } else {
        this.set(defaults);
      }
    }
    /** Alias for `this.scope.set` */

  }, {
    key: "set",
    value: function set() {
      var _this$scope2;

      this._assertScope();

      (_this$scope2 = this.scope).set.apply(_this$scope2, arguments);
    }
  }, {
    key: "_assertScope",
    value: function _assertScope() {
      if (!this.scope) {
        throw new Error("scope not found for ".concat(this.sceneName));
      }
    }
  }, {
    key: "_assertScopeNamepath",
    value: function _assertScopeNamepath(namepath) {
      if (!this.scope.has) {
        // For legacy scope signature
        return;
      }

      if (!this.scope.has(namepath)) {
        throw new Error("\"".concat(namepath, "\" is not found in the scope of ").concat(this.sceneName));
      }
    }
  }, {
    key: "defaults",
    get: function get() {
      return {};
    }
  }, {
    key: "sceneName",
    get: function get() {
      return this.name || this.constructor.name;
    }
    /**
     * Scene scope
     * @returns {*}
     */

  }, {
    key: "scope",
    get: function get() {
      return null;
    }
  }]);
  return TheScene;
}(TheSceneMixed);

module.exports = TheScene;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZVNjZW5lLmpzIl0sIm5hbWVzIjpbImFzb2JqIiwicmVxdWlyZSIsImVycm9yTWl4IiwiZ29NaXgiLCJzdWJNaXgiLCJjbGVhbnVwIiwiVGhlU2NlbmVNaXhlZCIsInJlZHVjZSIsIkNsYXp6IiwibWl4IiwiVGhlU2NlbmUiLCJwcm9wcyIsIk9iamVjdCIsImFzc2lnbiIsInN1YkZvciIsIm5hbWVwYXRoIiwib3B0aW9ucyIsInN0cmljdCIsIl9hc3NlcnRTY29wZSIsIl9hc3NlcnRTY29wZU5hbWVwYXRoIiwicmVzdWx0Iiwic2NvcGUiLCJnZXQiLCJpc0VtcHR5IiwiRXJyb3IiLCJuYW1lIiwiaGFzIiwidmFsdWUiLCJlbXB0eSIsIm5hbWVzIiwiaW5pdCIsImRlZmF1bHRzIiwibGVuZ3RoIiwic2V0IiwibWFwIiwic2NlbmVOYW1lIiwiY29uc3RydWN0b3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O2VBQ29DQSxPQUFPLENBQUMsVUFBRCxDO0lBQW5DQyxRLFlBQUFBLFE7SUFBVUMsSyxZQUFBQSxLO0lBQU9DLE0sWUFBQUEsTTs7SUFFakJDLE8sR0FBWUwsSyxDQUFaSyxPO0FBRVIsSUFBTUMsYUFBYSxHQUFHLENBQUNKLFFBQUQsRUFBV0MsS0FBWCxFQUFrQkMsTUFBbEIsRUFBMEJHLE1BQTFCLENBQ3BCLFVBQUNDLEtBQUQsRUFBUUMsR0FBUjtBQUFBLFNBQWdCQSxHQUFHLENBQUNELEtBQUQsQ0FBbkI7QUFBQSxDQURvQjtBQUFBO0FBQUEsRUFBdEI7QUFLQTs7SUFDTUUsUTs7Ozs7QUFDSixzQkFBd0I7QUFBQTs7QUFBQSxRQUFaQyxLQUFZLHVFQUFKLEVBQUk7QUFBQTtBQUN0QjtBQUNBQyxJQUFBQSxNQUFNLENBQUNDLE1BQVAsaURBQW9CRixLQUFwQjtBQUNBLFVBQUtBLEtBQUwsR0FB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LCJzb3VyY2VSb290IjoiLi4vbGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbWVtYmVyT2YgbW9kdWxlOkB0aGUtL3NjZW5lXG4gKiBAY2xhc3MgVGhlU2NlbmVcbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGFzb2JqID0gcmVxdWlyZSgnYXNvYmonKVxuY29uc3QgeyBlcnJvck1peCwgZ29NaXgsIHN1Yk1peCB9ID0gcmVxdWlyZSgnLi9taXhpbnMnKVxuXG5jb25zdCB7IGNsZWFudXAgfSA9IGFzb2JqXG5cbmNvbnN0IFRoZVNjZW5lTWl4ZWQgPSBbZXJyb3JNaXgsIGdvTWl4LCBzdWJNaXhdLnJlZHVjZShcbiAgKENsYXp6LCBtaXgpID0+IG1peChDbGF6eiksXG4gIGNsYXNzIFJvb3Qge30sXG4pXG5cbi8qKiBAbGVuZHMgbW9kdWxlOkB0aGUtL3NjZW5lLlRoZVNjZW5lICovXG5jbGFzcyBUaGVTY2VuZSBleHRlbmRzIFRoZVNjZW5lTWl4ZWQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoKVxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpXG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG4gIH1cblxuICBnZXQgZGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cblxuICBnZXQgc2NlbmVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWUgfHwgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gIH1cblxuICAvKipcbiAgICogU2NlbmUgc2NvcGVcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBnZXQgc2NvcGUoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKiBBbGlhcyBmb3IgYHRoaXMuc3ViRm9yYCAqL1xuICBmb3IoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLnN1YkZvciguLi5hcmdzKVxuICB9XG5cbiAgLyoqIEFsaWFzIGZvciBgdGhpcy5zY29wZS5nZXRgICovXG4gIGdldChuYW1lcGF0aCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBzdHJpY3QgPSBmYWxzZSB9ID0gb3B0aW9uc1xuICAgIHRoaXMuX2Fzc2VydFNjb3BlKClcbiAgICB0aGlzLl9hc3NlcnRTY29wZU5hbWVwYXRoKG5hbWVwYXRoKVxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2NvcGUuZ2V0KG5hbWVwYXRoKVxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgIGNvbnN0IGlzRW1wdHkgPSB0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyB8fCByZXN1bHQgPT09IG51bGxcbiAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7dGhpcy5uYW1lfV0gJHtuYW1lcGF0aH0gaXMgcmVxdWlyZWRgKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdmFsdWUgZXhpc3RzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lcGF0aFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGhhcyhuYW1lcGF0aCkge1xuICAgIHRoaXMuX2Fzc2VydFNjb3BlKClcbiAgICB0aGlzLl9hc3NlcnRTY29wZU5hbWVwYXRoKG5hbWVwYXRoKVxuICAgIGlmICghdGhpcy5zY29wZS5oYXMobmFtZXBhdGgpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnNjb3BlLmdldChuYW1lcGF0aClcbiAgICBjb25zdCBlbXB0eSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGxcbiAgICByZXR1cm4gIWVtcHR5XG4gIH1cblxuICAvKiogQWxpYXMgZm9yIGB0aGlzLnNjb3BlLmluaXRgICovXG4gIGluaXQoLi4ubmFtZXMpIHtcbiAgICB0aGlzLl9hc3NlcnRTY29wZSgpXG4gICAgdGhpcy5zY29wZS5pbml0KC4uLm5hbWVzKVxuICAgIGNvbnN0IHsgZGVmYXVsdHMgPSB7fSB9ID0gdGhpc1xuICAgIGlmIChuYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNldChcbiAgICAgICAgY2xlYW51cChcbiAgICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICAuLi5uYW1lcy5tYXAoKG5hbWUpID0+ICh7XG4gICAgICAgICAgICAgIFtuYW1lXTogZGVmYXVsdHNbbmFtZV0sXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXQoZGVmYXVsdHMpXG4gICAgfVxuICB9XG5cbiAgLyoqIEFsaWFzIGZvciBgdGhpcy5zY29wZS5zZXRgICovXG4gIHNldCguLi5hcmdzKSB7XG4gICAgdGhpcy5fYXNzZXJ0U2NvcGUoKVxuICAgIHRoaXMuc2NvcGUuc2V0KC4uLmFyZ3MpXG4gIH1cblxuICBfYXNzZXJ0U2NvcGUoKSB7XG4gICAgaWYgKCF0aGlzLnNjb3BlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHNjb3BlIG5vdCBmb3VuZCBmb3IgJHt0aGlzLnNjZW5lTmFtZX1gKVxuICAgIH1cbiAgfVxuXG4gIF9hc3NlcnRTY29wZU5hbWVwYXRoKG5hbWVwYXRoKSB7XG4gICAgaWYgKCF0aGlzLnNjb3BlLmhhcykge1xuICAgICAgLy8gRm9yIGxlZ2FjeSBzY29wZSBzaWduYXR1cmVcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIXRoaXMuc2NvcGUuaGFzKG5hbWVwYXRoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgXCIke25hbWVwYXRofVwiIGlzIG5vdCBmb3VuZCBpbiB0aGUgc2NvcGUgb2YgJHt0aGlzLnNjZW5lTmFtZX1gLFxuICAgICAgKVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRoZVNjZW5lXG4iXX0=