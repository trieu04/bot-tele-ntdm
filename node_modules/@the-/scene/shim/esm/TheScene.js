/**
 * @memberOf module:@the-/scene
 * @class TheScene
 */
'use strict';

import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import asobj from 'asobj';
import { errorMix, goMix, subMix } from './mixins';
var cleanup = asobj.cleanup;
var TheSceneMixed = [errorMix, goMix, subMix].reduce(function (Clazz, mix) {
  return mix(Clazz);
}, function Root() {
  _classCallCheck(this, Root);
});
/** @lends module:@the-/scene.TheScene */

var TheScene =
/*#__PURE__*/
function (_TheSceneMixed) {
  _inherits(TheScene, _TheSceneMixed);

  function TheScene() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TheScene);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TheScene).call(this));
    Object.assign(_assertThisInitialized(_this), props);
    _this.props = props;
    return _this;
  }

  _createClass(TheScene, [{
    key: "for",

    /** Alias for `this.subFor` */
    value: function _for() {
      return this.subFor.apply(this, arguments);
    }
    /** Alias for `this.scope.get` */

  }, {
    key: "get",
    value: function get(namepath) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _options$strict = options.strict,
          strict = _options$strict === void 0 ? false : _options$strict;

      this._assertScope();

      this._assertScopeNamepath(namepath);

      var result = this.scope.get(namepath);

      if (strict) {
        var isEmpty = typeof result === 'undefined' || result === null;

        if (isEmpty) {
          throw new Error("[".concat(this.name, "] ").concat(namepath, " is required"));
        }
      }

      return result;
    }
    /**
     * Check if value exists
     * @param {string} namepath
     * @returns {boolean}
     */

  }, {
    key: "has",
    value: function has(namepath) {
      this._assertScope();

      this._assertScopeNamepath(namepath);

      if (!this.scope.has(namepath)) {
        return false;
      }

      var value = this.scope.get(namepath);
      var empty = typeof value === 'undefined' || value === null;
      return !empty;
    }
    /** Alias for `this.scope.init` */

  }, {
    key: "init",
    value: function init() {
      var _this$scope;

      this._assertScope();

      for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
        names[_key] = arguments[_key];
      }

      (_this$scope = this.scope).init.apply(_this$scope, names);

      var _this$defaults = this.defaults,
          defaults = _this$defaults === void 0 ? {} : _this$defaults;

      if (names.length > 0) {
        this.set(cleanup(Object.assign.apply(Object, [{}].concat(_toConsumableArray(names.map(function (name) {
          return _defineProperty({}, name, defaults[name]);
        }))))));
      } else {
        this.set(defaults);
      }
    }
    /** Alias for `this.scope.set` */

  }, {
    key: "set",
    value: function set() {
      var _this$scope2;

      this._assertScope();

      (_this$scope2 = this.scope).set.apply(_this$scope2, arguments);
    }
  }, {
    key: "_assertScope",
    value: function _assertScope() {
      if (!this.scope) {
        throw new Error("scope not found for ".concat(this.sceneName));
      }
    }
  }, {
    key: "_assertScopeNamepath",
    value: function _assertScopeNamepath(namepath) {
      if (!this.scope.has) {
        // For legacy scope signature
        return;
      }

      if (!this.scope.has(namepath)) {
        throw new Error("\"".concat(namepath, "\" is not found in the scope of ").concat(this.sceneName));
      }
    }
  }, {
    key: "defaults",
    get: function get() {
      return {};
    }
  }, {
    key: "sceneName",
    get: function get() {
      return this.name || this.constructor.name;
    }
    /**
     * Scene scope
     * @returns {*}
     */

  }, {
    key: "scope",
    get: function get() {
      return null;
    }
  }]);

  return TheScene;
}(TheSceneMixed);

export default TheScene;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZVNjZW5lLmpzIl0sIm5hbWVzIjpbImFzb2JqIiwiZXJyb3JNaXgiLCJnb01peCIsInN1Yk1peCIsImNsZWFudXAiLCJUaGVTY2VuZU1peGVkIiwicmVkdWNlIiwiQ2xhenoiLCJtaXgiLCJUaGVTY2VuZSIsInByb3BzIiwiT2JqZWN0IiwiYXNzaWduIiwic3ViRm9yIiwibmFtZXBhdGgiLCJvcHRpb25zIiwic3RyaWN0IiwiX2Fzc2VydFNjb3BlIiwiX2Fzc2VydFNjb3BlTmFtZXBhdGgiLCJyZXN1bHQiLCJzY29wZSIsImdldCIsImlzRW1wdHkiLCJFcnJvciIsIm5hbWUiLCJoYXMiLCJ2YWx1ZSIsImVtcHR5IiwibmFtZXMiLCJpbml0IiwiZGVmYXVsdHMiLCJsZW5ndGgiLCJzZXQiLCJtYXAiLCJzY2VuZU5hbWUiLCJjb25zdHJ1Y3RvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQTs7Ozs7Ozs7OztBQUVBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFRQyxRQUFSLEVBQWtCQyxLQUFsQixFQUF5QkMsTUFBekIsUUFBc0MsVUFBdEM7SUFFUUMsTyxHQUFZSixLLENBQVpJLE87QUFFUixJQUFNQyxhQUFhLEdBQUcsQ0FBQ0osUUFBRCxFQUFXQyxLQUFYLEVBQWtCQyxNQUFsQixFQUEwQkcsTUFBMUIsQ0FDcEIsVUFBQ0MsS0FBRCxFQUFRQyxHQUFSO0FBQUEsU0FBZ0JBLEdBQUcsQ0FBQ0QsS0FBRCxDQUFuQjtBQUFBLENBRG9CO0FBQUE7QUFBQSxFQUF0QjtBQUtBOztJQUNNRSxROzs7OztBQUNKLHNCQUF3QjtBQUFBOztBQUFBLFFBQVpDLEtBQVksdUVBQUosRUFBSTs7QUFBQTs7QUFDdEI7QUFDQUMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLGdDQUFvQkYsS0FBcEI7QUFDQSxVQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFIc0I7QUFJdkI7Ozs7O0FBa0JEOzJCQUNhO0FBQ1gsYUFBTyxLQUFLRyxNQUFMLHVCQUFQO0FBQ0Q7QUFFRDs7Ozt3QkFDSUMsUSxFQUF3QjtBQUFBLFVBQWRDLE9BQWMsdUVBQUosRUFBSTtBQUFBLDRCQUNDQSxPQURELENBQ2xCQyxNQURrQjtBQUFBLFVBQ2xCQSxNQURrQixnQ0FDVCxLQURTOztBQUUxQixXQUFLQyxZQUFMOztBQUNBLFdBQUtDLG9CQUFMLENBQTBCSixRQUExQjs7QUFDQSxVQUFNSyxNQUFNLEdBQUcsS0FBS0MsS0FBTCxDQUFXQyxHQUFYLENBQWVQLFFBQWYsQ0FBZjs7QUFDQSxVQUFJRSxNQUFKLEVBQVk7QUFDVixZQUFNTSxPQUFPLEdBQUcsT0FBT0gsTUFBUCxLQUFrQixXQUFsQixJQUFpQ0EsTUFBTSxLQUFLLElBQTVEOztBQUNBLFlBQUlHLE9BQUosRUFBYTtBQUNYLGdCQUFNLElBQUlDLEtBQUosWUFBYyxLQUFLQyxJQUFuQixlQUE0QlYsUUFBNUIsa0JBQU47QUFDRDtBQUNGOztBQUNELGFBQU9LLE1BQVA7QUFDRDtBQUVEOzs7Ozs7Ozt3QkFLSUwsUSxFQUFVO0FBQ1osV0FBS0csWUFBTDs7QUFDQSxXQUFLQyxvQkFBTCxDQUEwQkosUUFBMUI7O0FBQ0EsVUFBSSxDQUFDLEtBQUtNLEtBQUwsQ0FBV0ssR0FBWCxDQUFlWCxRQUFmLENBQUwsRUFBK0I7QUFDN0IsZUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsVUFBTVksS0FBSyxHQUFHLEtBQUtOLEtBQUwsQ0FBV0MsR0FBWCxDQUFlUCxRQUFmLENBQWQ7QUFDQSxVQUFNYSxLQUFLLEdBQUcsT0FBT0QsS0FBUCxLQUFpQixXQUFqQixJQUFnQ0EsS0FBSyxLQUFLLElBQXhEO0FBQ0EsYUFBTyxDQUFDQyxLQUFSO0FBQ0Q7QUFFRDs7OzsyQkFDZTtBQUFBOztBQUNiLFdBQUtWLFlBQUw7O0FBRGEsd0NBQVBXLEtBQU87QUFBUEEsUUFBQUEsS0FBTztBQUFBOztBQUViLDBCQUFLUixLQUFMLEVBQVdTLElBQVgsb0JBQW1CRCxLQUFuQjs7QUFGYSwyQkFHYSxJQUhiLENBR0xFLFFBSEs7QUFBQSxVQUdMQSxRQUhLLCtCQUdNLEVBSE47O0FBSWIsVUFBSUYsS0FBSyxDQUFDRyxNQUFOLEdBQWUsQ0FBbkIsRUFBc0I7QUFDcEIsYUFBS0MsR0FBTCxDQUNFNUIsT0FBTyxDQUNMTyxNQUFNLENBQUNDLE1BQVAsT0FBQUQsTUFBTSxHQUNKLEVBREksNEJBRURpQixLQUFLLENBQUNLLEdBQU4sQ0FBVSxVQUFDVCxJQUFEO0FBQUEscUNBQ1ZBLElBRFUsRUFDSE0sUUFBUSxDQUFDTixJQUFELENBREw7QUFBQSxTQUFWLENBRkMsR0FERCxDQURUO0FBVUQsT0FYRCxNQVdPO0FBQ0wsYUFBS1EsR0FBTCxDQUFTRixRQUFUO0FBQ0Q7QUFDRjtBQUVEOzs7OzBCQUNhO0FBQUE7O0FBQ1gsV0FBS2IsWUFBTDs7QUFDQSwyQkFBS0csS0FBTCxFQUFXWSxHQUFYO0FBQ0Q7OzttQ0FFYztBQUNiLFVBQUksQ0FBQyxLQUFLWixLQUFWLEVBQWlCO0FBQ2YsY0FBTSxJQUFJRyxLQUFKLCtCQUFpQyxLQUFLVyxTQUF0QyxFQUFOO0FBQ0Q7QUFDRjs7O3lDQUVvQnBCLFEsRUFBVTtBQUM3QixVQUFJLENBQUMsS0FBS00sS0FBTCxDQUFXSyxHQUFoQixFQUFxQjtBQUNuQjtBQUNBO0FBQ0Q7O0FBQ0QsVUFBSSxDQUFDLEtBQUtMLEtBQUwsQ0FBV0ssR0FBWCxDQUFlWCxRQUFmLENBQUwsRUFBK0I7QUFDN0IsY0FBTSxJQUFJUyxLQUFKLGFBQ0FULFFBREEsNkNBQzBDLEtBQUtvQixTQUQvQyxFQUFOO0FBR0Q7QUFDRjs7O3dCQS9GYztBQUNiLGFBQU8sRUFBUDtBQUNEOzs7d0JBRWU7QUFDZCxhQUFPLEtBQUtWLElBQUwsSUFBYSxLQUFLVyxXQUFMLENBQWlCWCxJQUFyQztBQUNEO0FBRUQ7Ozs7Ozs7d0JBSVk7QUFDVixhQUFPLElBQVA7QUFDRDs7OztFQXJCb0JuQixhOztBQXlHdkIsZUFBZUksUUFBZiIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi92YXIvZm9sZGVycy92My9wczZrcmZiMTJ3MzdxcHk3Z2QweWhyODQwMDAwZ24vVC90bXAtNDE2NzE3NmdzUVZldENhbmsiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtZW1iZXJPZiBtb2R1bGU6QHRoZS0vc2NlbmVcbiAqIEBjbGFzcyBUaGVTY2VuZVxuICovXG4ndXNlIHN0cmljdCdcblxuaW1wb3J0IGFzb2JqIGZyb20gJ2Fzb2JqJztcbmltcG9ydCB7ZXJyb3JNaXgsIGdvTWl4LCBzdWJNaXh9IGZyb20gJy4vbWl4aW5zJztcblxuY29uc3QgeyBjbGVhbnVwIH0gPSBhc29ialxuXG5jb25zdCBUaGVTY2VuZU1peGVkID0gW2Vycm9yTWl4LCBnb01peCwgc3ViTWl4XS5yZWR1Y2UoXG4gIChDbGF6eiwgbWl4KSA9PiBtaXgoQ2xhenopLFxuICBjbGFzcyBSb290IHt9LFxuKVxuXG4vKiogQGxlbmRzIG1vZHVsZTpAdGhlLS9zY2VuZS5UaGVTY2VuZSAqL1xuY2xhc3MgVGhlU2NlbmUgZXh0ZW5kcyBUaGVTY2VuZU1peGVkIHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BzKVxuICAgIHRoaXMucHJvcHMgPSBwcm9wc1xuICB9XG5cbiAgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiB7fVxuICB9XG5cbiAgZ2V0IHNjZW5lTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lIHx8IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICB9XG5cbiAgLyoqXG4gICAqIFNjZW5lIHNjb3BlXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgZ2V0IHNjb3BlKCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKiogQWxpYXMgZm9yIGB0aGlzLnN1YkZvcmAgKi9cbiAgZm9yKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5zdWJGb3IoLi4uYXJncylcbiAgfVxuXG4gIC8qKiBBbGlhcyBmb3IgYHRoaXMuc2NvcGUuZ2V0YCAqL1xuICBnZXQobmFtZXBhdGgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgc3RyaWN0ID0gZmFsc2UgfSA9IG9wdGlvbnNcbiAgICB0aGlzLl9hc3NlcnRTY29wZSgpXG4gICAgdGhpcy5fYXNzZXJ0U2NvcGVOYW1lcGF0aChuYW1lcGF0aClcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNjb3BlLmdldChuYW1lcGF0aClcbiAgICBpZiAoc3RyaWN0KSB7XG4gICAgICBjb25zdCBpc0VtcHR5ID0gdHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgfHwgcmVzdWx0ID09PSBudWxsXG4gICAgICBpZiAoaXNFbXB0eSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3RoaXMubmFtZX1dICR7bmFtZXBhdGh9IGlzIHJlcXVpcmVkYClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhbHVlIGV4aXN0c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXBhdGhcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoYXMobmFtZXBhdGgpIHtcbiAgICB0aGlzLl9hc3NlcnRTY29wZSgpXG4gICAgdGhpcy5fYXNzZXJ0U2NvcGVOYW1lcGF0aChuYW1lcGF0aClcbiAgICBpZiAoIXRoaXMuc2NvcGUuaGFzKG5hbWVwYXRoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zY29wZS5nZXQobmFtZXBhdGgpXG4gICAgY29uc3QgZW1wdHkgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsXG4gICAgcmV0dXJuICFlbXB0eVxuICB9XG5cbiAgLyoqIEFsaWFzIGZvciBgdGhpcy5zY29wZS5pbml0YCAqL1xuICBpbml0KC4uLm5hbWVzKSB7XG4gICAgdGhpcy5fYXNzZXJ0U2NvcGUoKVxuICAgIHRoaXMuc2NvcGUuaW5pdCguLi5uYW1lcylcbiAgICBjb25zdCB7IGRlZmF1bHRzID0ge30gfSA9IHRoaXNcbiAgICBpZiAobmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zZXQoXG4gICAgICAgIGNsZWFudXAoXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgLi4ubmFtZXMubWFwKChuYW1lKSA9PiAoe1xuICAgICAgICAgICAgICBbbmFtZV06IGRlZmF1bHRzW25hbWVdLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0KGRlZmF1bHRzKVxuICAgIH1cbiAgfVxuXG4gIC8qKiBBbGlhcyBmb3IgYHRoaXMuc2NvcGUuc2V0YCAqL1xuICBzZXQoLi4uYXJncykge1xuICAgIHRoaXMuX2Fzc2VydFNjb3BlKClcbiAgICB0aGlzLnNjb3BlLnNldCguLi5hcmdzKVxuICB9XG5cbiAgX2Fzc2VydFNjb3BlKCkge1xuICAgIGlmICghdGhpcy5zY29wZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBzY29wZSBub3QgZm91bmQgZm9yICR7dGhpcy5zY2VuZU5hbWV9YClcbiAgICB9XG4gIH1cblxuICBfYXNzZXJ0U2NvcGVOYW1lcGF0aChuYW1lcGF0aCkge1xuICAgIGlmICghdGhpcy5zY29wZS5oYXMpIHtcbiAgICAgIC8vIEZvciBsZWdhY3kgc2NvcGUgc2lnbmF0dXJlXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCF0aGlzLnNjb3BlLmhhcyhuYW1lcGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFwiJHtuYW1lcGF0aH1cIiBpcyBub3QgZm91bmQgaW4gdGhlIHNjb3BlIG9mICR7dGhpcy5zY2VuZU5hbWV9YCxcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGhlU2NlbmU7XG4iXX0=