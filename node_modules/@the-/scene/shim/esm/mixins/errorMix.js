/**
 * @function errorMix
 * @memberOf module:@the-/scene.mixins
 * @param {function} BaseClass
 * @returns {function} MixedClass
 */
'use strict';
/** @lends module:@the-/scene.mixins.errorMix */

import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";

function errorMix(BaseClass) {
  /**
   * @memberOf module:@the-/scene.mixins.goMix
   * @inner
   */
  var ErrorMixed =
  /*#__PURE__*/
  function (_BaseClass) {
    _inherits(ErrorMixed, _BaseClass);

    function ErrorMixed() {
      _classCallCheck(this, ErrorMixed);

      return _possibleConstructorReturn(this, _getPrototypeOf(ErrorMixed).apply(this, arguments));
    }

    _createClass(ErrorMixed, [{
      key: "catchEntryError",
      value: function catchEntryError(err) {
        switch (err.name) {
          case 'PolicyError':
            {
              return this.parsePolicyError(err);
            }

          default:
            throw err;
        }
      }
    }, {
      key: "parseAppError",
      value: function parseAppError(err) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var l = this.l;
        var _err$detail = err.detail,
            field = _err$detail.field,
            _err$detail$messageKe = _err$detail.messageKey,
            messageKey = _err$detail$messageKe === void 0 ? options.defaultMessageKey : _err$detail$messageKe;
        return _defineProperty({}, field, l('errors', messageKey));
      }
    }, {
      key: "parsePolicyError",
      value: function parsePolicyError(err) {
        var l = this.l;
        var _err$detail2 = err.detail,
            _err$detail2$conflict = _err$detail2.conflict,
            conflict = _err$detail2$conflict === void 0 ? {} : _err$detail2$conflict,
            _err$detail2$failures = _err$detail2.failures,
            failures = _err$detail2$failures === void 0 ? {} : _err$detail2$failures,
            _err$detail2$missing = _err$detail2.missing,
            missing = _err$detail2$missing === void 0 ? [] : _err$detail2$missing;
        var messages = {};

        for (var _i = 0, _Object$keys = Object.keys(failures); _i < _Object$keys.length; _i++) {
          var name = _Object$keys[_i];
          var failure = failures[name];
          messages[name] = l('errors', failure.reason, failure);
        }

        for (var _i2 = 0, _Object$keys2 = Object.keys(conflict); _i2 < _Object$keys2.length; _i2++) {
          var _name = _Object$keys2[_i2];
          messages[_name] = l('errors', 'UNIQUE_VIOLATION_ERROR', {
            value: conflict[_name]
          });
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = missing[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _name2 = _step.value;
            messages[_name2] = l('errors', 'VALUE_MISSING_ERROR');
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return messages;
      }
    }]);

    return ErrorMixed;
  }(BaseClass);

  return ErrorMixed;
}

export default errorMix;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yTWl4LmpzIl0sIm5hbWVzIjpbImVycm9yTWl4IiwiQmFzZUNsYXNzIiwiRXJyb3JNaXhlZCIsImVyciIsIm5hbWUiLCJwYXJzZVBvbGljeUVycm9yIiwib3B0aW9ucyIsImwiLCJkZXRhaWwiLCJmaWVsZCIsIm1lc3NhZ2VLZXkiLCJkZWZhdWx0TWVzc2FnZUtleSIsImNvbmZsaWN0IiwiZmFpbHVyZXMiLCJtaXNzaW5nIiwibWVzc2FnZXMiLCJPYmplY3QiLCJrZXlzIiwiZmFpbHVyZSIsInJlYXNvbiIsInZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUE7QUFFQTs7Ozs7Ozs7O0FBQ0EsU0FBU0EsUUFBVCxDQUFrQkMsU0FBbEIsRUFBNkI7QUFDM0I7Ozs7QUFEMkIsTUFLckJDLFVBTHFCO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUEsc0NBTVRDLEdBTlMsRUFNSjtBQUNuQixnQkFBUUEsR0FBRyxDQUFDQyxJQUFaO0FBQ0UsZUFBSyxhQUFMO0FBQW9CO0FBQ2xCLHFCQUFPLEtBQUtDLGdCQUFMLENBQXNCRixHQUF0QixDQUFQO0FBQ0Q7O0FBQ0Q7QUFDRSxrQkFBTUEsR0FBTjtBQUxKO0FBT0Q7QUFkd0I7QUFBQTtBQUFBLG9DQWdCWEEsR0FoQlcsRUFnQlE7QUFBQSxZQUFkRyxPQUFjLHVFQUFKLEVBQUk7QUFBQSxZQUN2QkMsQ0FEdUIsR0FDakIsSUFEaUIsQ0FDdkJBLENBRHVCO0FBQUEsMEJBRXlCSixHQUFHLENBQUNLLE1BRjdCO0FBQUEsWUFFekJDLEtBRnlCLGVBRXpCQSxLQUZ5QjtBQUFBLGdEQUVsQkMsVUFGa0I7QUFBQSxZQUVsQkEsVUFGa0Isc0NBRUxKLE9BQU8sQ0FBQ0ssaUJBRkg7QUFHL0IsbUNBQ0dGLEtBREgsRUFDV0YsQ0FBQyxDQUFDLFFBQUQsRUFBV0csVUFBWCxDQURaO0FBR0Q7QUF0QndCO0FBQUE7QUFBQSx1Q0F3QlJQLEdBeEJRLEVBd0JIO0FBQUEsWUFDWkksQ0FEWSxHQUNOLElBRE0sQ0FDWkEsQ0FEWTtBQUFBLDJCQUVtQ0osR0FBRyxDQUFDSyxNQUZ2QztBQUFBLGlEQUVaSSxRQUZZO0FBQUEsWUFFWkEsUUFGWSxzQ0FFRCxFQUZDO0FBQUEsaURBRUdDLFFBRkg7QUFBQSxZQUVHQSxRQUZILHNDQUVjLEVBRmQ7QUFBQSxnREFFa0JDLE9BRmxCO0FBQUEsWUFFa0JBLE9BRmxCLHFDQUU0QixFQUY1QjtBQUdwQixZQUFNQyxRQUFRLEdBQUcsRUFBakI7O0FBQ0Esd0NBQW1CQyxNQUFNLENBQUNDLElBQVAsQ0FBWUosUUFBWixDQUFuQixrQ0FBMEM7QUFBckMsY0FBTVQsSUFBSSxtQkFBVjtBQUNILGNBQU1jLE9BQU8sR0FBR0wsUUFBUSxDQUFDVCxJQUFELENBQXhCO0FBQ0FXLFVBQUFBLFFBQVEsQ0FBQ1gsSUFBRCxDQUFSLEdBQWlCRyxDQUFDLENBQUMsUUFBRCxFQUFXVyxPQUFPLENBQUNDLE1BQW5CLEVBQTJCRCxPQUEzQixDQUFsQjtBQUNEOztBQUNELDBDQUFtQkYsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFFBQVosQ0FBbkIscUNBQTBDO0FBQXJDLGNBQU1SLEtBQUkscUJBQVY7QUFDSFcsVUFBQUEsUUFBUSxDQUFDWCxLQUFELENBQVIsR0FBaUJHLENBQUMsQ0FBQyxRQUFELEVBQVcsd0JBQVgsRUFBcUM7QUFDckRhLFlBQUFBLEtBQUssRUFBRVIsUUFBUSxDQUFDUixLQUFEO0FBRHNDLFdBQXJDLENBQWxCO0FBR0Q7O0FBWm1CO0FBQUE7QUFBQTs7QUFBQTtBQWFwQiwrQkFBbUJVLE9BQW5CLDhIQUE0QjtBQUFBLGdCQUFqQlYsTUFBaUI7QUFDMUJXLFlBQUFBLFFBQVEsQ0FBQ1gsTUFBRCxDQUFSLEdBQWlCRyxDQUFDLENBQUMsUUFBRCxFQUFXLHFCQUFYLENBQWxCO0FBQ0Q7QUFmbUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFnQnBCLGVBQU9RLFFBQVA7QUFDRDtBQXpDd0I7O0FBQUE7QUFBQSxJQUtGZCxTQUxFOztBQTRDM0IsU0FBT0MsVUFBUDtBQUNEOztBQUVELGVBQWVGLFFBQWYiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdmFyL2ZvbGRlcnMvdjMvcHM2a3JmYjEydzM3cXB5N2dkMHlocjg0MDAwMGduL1QvdG1wLTQxNjcxNzZnc1FWZXRDYW5rIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZnVuY3Rpb24gZXJyb3JNaXhcbiAqIEBtZW1iZXJPZiBtb2R1bGU6QHRoZS0vc2NlbmUubWl4aW5zXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBCYXNlQ2xhc3NcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gTWl4ZWRDbGFzc1xuICovXG4ndXNlIHN0cmljdCdcblxuLyoqIEBsZW5kcyBtb2R1bGU6QHRoZS0vc2NlbmUubWl4aW5zLmVycm9yTWl4ICovXG5mdW5jdGlvbiBlcnJvck1peChCYXNlQ2xhc3MpIHtcbiAgLyoqXG4gICAqIEBtZW1iZXJPZiBtb2R1bGU6QHRoZS0vc2NlbmUubWl4aW5zLmdvTWl4XG4gICAqIEBpbm5lclxuICAgKi9cbiAgY2xhc3MgRXJyb3JNaXhlZCBleHRlbmRzIEJhc2VDbGFzcyB7XG4gICAgY2F0Y2hFbnRyeUVycm9yKGVycikge1xuICAgICAgc3dpdGNoIChlcnIubmFtZSkge1xuICAgICAgICBjYXNlICdQb2xpY3lFcnJvcic6IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVBvbGljeUVycm9yKGVycilcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IGVyclxuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlQXBwRXJyb3IoZXJyLCBvcHRpb25zID0ge30pIHtcbiAgICAgIGNvbnN0IHsgbCB9ID0gdGhpc1xuICAgICAgbGV0IHsgZmllbGQsIG1lc3NhZ2VLZXkgPSBvcHRpb25zLmRlZmF1bHRNZXNzYWdlS2V5IH0gPSBlcnIuZGV0YWlsXG4gICAgICByZXR1cm4ge1xuICAgICAgICBbZmllbGRdOiBsKCdlcnJvcnMnLCBtZXNzYWdlS2V5KSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZVBvbGljeUVycm9yKGVycikge1xuICAgICAgY29uc3QgeyBsIH0gPSB0aGlzXG4gICAgICBjb25zdCB7IGNvbmZsaWN0ID0ge30sIGZhaWx1cmVzID0ge30sIG1pc3NpbmcgPSBbXSB9ID0gZXJyLmRldGFpbFxuICAgICAgY29uc3QgbWVzc2FnZXMgPSB7fVxuICAgICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGZhaWx1cmVzKSkge1xuICAgICAgICBjb25zdCBmYWlsdXJlID0gZmFpbHVyZXNbbmFtZV1cbiAgICAgICAgbWVzc2FnZXNbbmFtZV0gPSBsKCdlcnJvcnMnLCBmYWlsdXJlLnJlYXNvbiwgZmFpbHVyZSlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhjb25mbGljdCkpIHtcbiAgICAgICAgbWVzc2FnZXNbbmFtZV0gPSBsKCdlcnJvcnMnLCAnVU5JUVVFX1ZJT0xBVElPTl9FUlJPUicsIHtcbiAgICAgICAgICB2YWx1ZTogY29uZmxpY3RbbmFtZV0sXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbWlzc2luZykge1xuICAgICAgICBtZXNzYWdlc1tuYW1lXSA9IGwoJ2Vycm9ycycsICdWQUxVRV9NSVNTSU5HX0VSUk9SJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXNzYWdlc1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBFcnJvck1peGVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGVycm9yTWl4O1xuIl19