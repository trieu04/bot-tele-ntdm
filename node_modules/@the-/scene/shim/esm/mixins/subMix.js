/**
 * @function subMix
 * @memberOf module:@the-/scene.mixins
 * @param {function} BaseClass
 * @returns {function} MixedClass
 */
'use strict';
/** @lends module:@the-/scene.mixins.subMix */

import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";

function subMix(BaseClass) {
  /**
   * @memberOf module:@the-/scene.mixins.subMix
   * @inner
   */
  var SubMixed =
  /*#__PURE__*/
  function (_BaseClass) {
    _inherits(SubMixed, _BaseClass);

    function SubMixed() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SubMixed);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SubMixed)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.subs = {};
      return _this;
    }
    /**
     * Get sub scene with scope for namepath
     * @param {string} namepath - Namepath
     * @returns {*}
     */


    _createClass(SubMixed, [{
      key: "subFor",
      value: function subFor(namepath) {
        var scope = this.scope.of(namepath);
        var sub = this.subs[namepath];

        if (sub) {
          return sub;
        }

        var SubScene =
        /*#__PURE__*/
        function (_this$constructor) {
          _inherits(SubScene, _this$constructor);

          function SubScene() {
            _classCallCheck(this, SubScene);

            return _possibleConstructorReturn(this, _getPrototypeOf(SubScene).apply(this, arguments));
          }

          _createClass(SubScene, [{
            key: "scope",
            get: function get() {
              return scope;
            }
          }]);

          return SubScene;
        }(this.constructor);

        this.subs[namepath] = new SubScene(this.props);
      }
    }]);

    return SubMixed;
  }(BaseClass);

  return SubMixed;
}

export default subMix;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1Yk1peC5qcyJdLCJuYW1lcyI6WyJzdWJNaXgiLCJCYXNlQ2xhc3MiLCJTdWJNaXhlZCIsImFyZ3MiLCJzdWJzIiwibmFtZXBhdGgiLCJzY29wZSIsIm9mIiwic3ViIiwiU3ViU2NlbmUiLCJjb25zdHJ1Y3RvciIsInByb3BzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUE7QUFFQTs7Ozs7Ozs7QUFDQSxTQUFTQSxNQUFULENBQWdCQyxTQUFoQixFQUEyQjtBQUN6Qjs7OztBQUR5QixNQUtuQkMsUUFMbUI7QUFBQTtBQUFBO0FBQUE7O0FBTXZCLHdCQUFxQjtBQUFBOztBQUFBOztBQUFBOztBQUFBLHdDQUFOQyxJQUFNO0FBQU5BLFFBQUFBLElBQU07QUFBQTs7QUFDbkIseUlBQVNBLElBQVQ7QUFDQSxZQUFLQyxJQUFMLEdBQVksRUFBWjtBQUZtQjtBQUdwQjtBQUVEOzs7Ozs7O0FBWHVCO0FBQUE7QUFBQSw2QkFnQmhCQyxRQWhCZ0IsRUFnQk47QUFDZixZQUFNQyxLQUFLLEdBQUcsS0FBS0EsS0FBTCxDQUFXQyxFQUFYLENBQWNGLFFBQWQsQ0FBZDtBQUNBLFlBQU1HLEdBQUcsR0FBRyxLQUFLSixJQUFMLENBQVVDLFFBQVYsQ0FBWjs7QUFDQSxZQUFJRyxHQUFKLEVBQVM7QUFDUCxpQkFBT0EsR0FBUDtBQUNEOztBQUxjLFlBT1RDLFFBUFM7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSxnQ0FRRDtBQUNWLHFCQUFPSCxLQUFQO0FBQ0Q7QUFWWTs7QUFBQTtBQUFBLFVBT1EsS0FBS0ksV0FQYjs7QUFhZixhQUFLTixJQUFMLENBQVVDLFFBQVYsSUFBc0IsSUFBSUksUUFBSixDQUFhLEtBQUtFLEtBQWxCLENBQXRCO0FBQ0Q7QUE5QnNCOztBQUFBO0FBQUEsSUFLRlYsU0FMRTs7QUFpQ3pCLFNBQU9DLFFBQVA7QUFDRDs7QUFFRCxlQUFlRixNQUFmIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Zhci9mb2xkZXJzL3YzL3BzNmtyZmIxMnczN3FweTdnZDB5aHI4NDAwMDBnbi9UL3RtcC00MTY3MTc2Z3NRVmV0Q2FuayIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZ1bmN0aW9uIHN1Yk1peFxuICogQG1lbWJlck9mIG1vZHVsZTpAdGhlLS9zY2VuZS5taXhpbnNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IEJhc2VDbGFzc1xuICogQHJldHVybnMge2Z1bmN0aW9ufSBNaXhlZENsYXNzXG4gKi9cbid1c2Ugc3RyaWN0J1xuXG4vKiogQGxlbmRzIG1vZHVsZTpAdGhlLS9zY2VuZS5taXhpbnMuc3ViTWl4ICovXG5mdW5jdGlvbiBzdWJNaXgoQmFzZUNsYXNzKSB7XG4gIC8qKlxuICAgKiBAbWVtYmVyT2YgbW9kdWxlOkB0aGUtL3NjZW5lLm1peGlucy5zdWJNaXhcbiAgICogQGlubmVyXG4gICAqL1xuICBjbGFzcyBTdWJNaXhlZCBleHRlbmRzIEJhc2VDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgc3VwZXIoLi4uYXJncylcbiAgICAgIHRoaXMuc3VicyA9IHt9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHN1YiBzY2VuZSB3aXRoIHNjb3BlIGZvciBuYW1lcGF0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lcGF0aCAtIE5hbWVwYXRoXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgc3ViRm9yKG5hbWVwYXRoKSB7XG4gICAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGUub2YobmFtZXBhdGgpXG4gICAgICBjb25zdCBzdWIgPSB0aGlzLnN1YnNbbmFtZXBhdGhdXG4gICAgICBpZiAoc3ViKSB7XG4gICAgICAgIHJldHVybiBzdWJcbiAgICAgIH1cblxuICAgICAgY2xhc3MgU3ViU2NlbmUgZXh0ZW5kcyB0aGlzLmNvbnN0cnVjdG9yIHtcbiAgICAgICAgZ2V0IHNjb3BlKCkge1xuICAgICAgICAgIHJldHVybiBzY29wZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3Vic1tuYW1lcGF0aF0gPSBuZXcgU3ViU2NlbmUodGhpcy5wcm9wcylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gU3ViTWl4ZWRcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3ViTWl4O1xuIl19