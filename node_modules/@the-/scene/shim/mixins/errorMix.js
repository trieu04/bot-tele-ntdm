/**
 * @function errorMix
 * @memberOf module:@the-/scene.mixins
 * @param {function} BaseClass
 * @returns {function} MixedClass
 */
'use strict';
/** @lends module:@the-/scene.mixins.errorMix */

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

function errorMix(BaseClass) {
  /**
   * @memberOf module:@the-/scene.mixins.goMix
   * @inner
   */
  var ErrorMixed =
  /*#__PURE__*/
  function (_BaseClass) {
    (0, _inherits2["default"])(ErrorMixed, _BaseClass);

    function ErrorMixed() {
      (0, _classCallCheck2["default"])(this, ErrorMixed);
      return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ErrorMixed).apply(this, arguments));
    }

    (0, _createClass2["default"])(ErrorMixed, [{
      key: "catchEntryError",
      value: function catchEntryError(err) {
        switch (err.name) {
          case 'PolicyError':
            {
              return this.parsePolicyError(err);
            }

          default:
            throw err;
        }
      }
    }, {
      key: "parseAppError",
      value: function parseAppError(err) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var l = this.l;
        var _err$detail = err.detail,
            field = _err$detail.field,
            _err$detail$messageKe = _err$detail.messageKey,
            messageKey = _err$detail$messageKe === void 0 ? options.defaultMessageKey : _err$detail$messageKe;
        return (0, _defineProperty2["default"])({}, field, l('errors', messageKey));
      }
    }, {
      key: "parsePolicyError",
      value: function parsePolicyError(err) {
        var l = this.l;
        var _err$detail2 = err.detail,
            _err$detail2$conflict = _err$detail2.conflict,
            conflict = _err$detail2$conflict === void 0 ? {} : _err$detail2$conflict,
            _err$detail2$failures = _err$detail2.failures,
            failures = _err$detail2$failures === void 0 ? {} : _err$detail2$failures,
            _err$detail2$missing = _err$detail2.missing,
            missing = _err$detail2$missing === void 0 ? [] : _err$detail2$missing;
        var messages = {};

        for (var _i = 0, _Object$keys = Object.keys(failures); _i < _Object$keys.length; _i++) {
          var name = _Object$keys[_i];
          var failure = failures[name];
          messages[name] = l('errors', failure.reason, failure);
        }

        for (var _i2 = 0, _Object$keys2 = Object.keys(conflict); _i2 < _Object$keys2.length; _i2++) {
          var _name = _Object$keys2[_i2];
          messages[_name] = l('errors', 'UNIQUE_VIOLATION_ERROR', {
            value: conflict[_name]
          });
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = missing[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _name2 = _step.value;
            messages[_name2] = l('errors', 'VALUE_MISSING_ERROR');
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return messages;
      }
    }]);
    return ErrorMixed;
  }(BaseClass);

  return ErrorMixed;
}

module.exports = errorMix;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yTWl4LmpzIl0sIm5hbWVzIjpbImVycm9yTWl4IiwiQmFzZUNsYXNzIiwiRXJyb3JNaXhlZCIsImVyciIsIm5hbWUiLCJwYXJzZVBvbGljeUVycm9yIiwib3B0aW9ucyIsImwiLCJkZXRhaWwiLCJmaWVsZCIsIm1lc3NhZ2VLZXkiLCJkZWZhdWx0TWVzc2FnZUtleSIsImNvbmZsaWN0IiwiZmFpbHVyZXMiLCJtaXNzaW5nIiwibWVzc2FnZXMiLCJPYmplY3QiLCJrZXlzIiwiZmFpbHVyZSIsInJlYXNvbiIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxTQUFTQSxRQUFULENBQWtCQyxTQUFsQixFQUE2QjtBQUMzQjs7OztBQUQyQixNQUtyQkMsVUFMcUI7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLHNDQU1UQyxHQU5TLEVBTUo7QUFDbkIsZ0JBQVFBLEdBQUcsQ0FBQ0MsSUFBWjtBQUNFLGVBQUssYUFBTDtBQUFvQjtBQUNsQixxQkFBTyxLQUFLQyxnQkFBTCxDQUFzQkYsR0FBdEIsQ0FBUDtBQUNEOztBQUNEO0FBQ0Usa0JBQU1BLEdBQU47QUFMSjtBQU9EO0FBZHdCO0FBQUE7QUFBQSxvQ0FnQlhBLEdBaEJXLEVBZ0JRO0FBQUEsWUFBZEcsT0FBYyx1RUFBSixFQUFJO0FBQUEsWUFDdkJDLENBRHVCLEdBQ2pCLElBRGlCLENBQ3ZCQSxDQUR1QjtBQUFBLDBCQUV5QkosR0FBRyxDQUFDSyxNQUY3QjtBQUFBLFlBRXpCQyxLQUZ5QixlQUV6QkEsS0FGeUI7QUFBQSxnREFFbEJDLFVBRmtCO0FBQUEsWUFFbEJBLFVBRmtCLHNDQUVMSixPQUFPLENBQUNLLGlCQUZIO0FBRy9CLG9EQUNHRixLQURILEVBQ1dGLENBQUMsQ0FBQyxRQUFELEVBQVdHLFVBQVgsQ0FEWjtBQUdEO0FBdEJ3QjtBQUFBO0FBQUEsdUNBd0JSUCxHQXhCUSxFQXdCSDtBQUFBLFlBQ1pJLENBRFksR0FDTixJQURNLENBQ1pBLENBRFk7QUFBQSwyQkFFbUNKLEdBQUcsQ0FBQ0ssTUFGdkM7QUFBQSxpREFFWkksUUFGWTtBQUFBLFlBRVpBLFFBRlksc0NBRUQsRUFGQztBQUFBLGlEQUVHQyxRQUZIO0FBQUEsWUFFR0EsUUFGSCxzQ0FFYyxFQUZkO0FBQUEsZ0RBRWtCQyxPQUZsQjtBQUFBLFlBRWtCQSxPQUZsQixxQ0FFNEIsRUFGNUI7QUFHcEIsWUFBTUMsUUFBUSxHQUFHLEVBQWpCOztBQUNBLHdDQUFtQkMsTUFBTSxDQUFDQyxJQUFQLENBQVlKLFFBQVosQ0FBbkIsa0NBQTBDO0FBQXJDLGNBQU1ULElBQUksbUJBQVY7QUFDSCxjQUFNYyxPQUFPLEdBQUdMLFFBQVEsQ0FBQ1QsSUFBRCxDQUF4QjtBQUNBVyxVQUFBQSxRQUFRLENBQUNYLElBQUQsQ0FBUixHQUFpQkcsQ0FBQyxDQUFDLFFBQUQsRUFBV1csT0FBTyxDQUFDQyxNQUFuQixFQUEyQkQsT0FBM0IsQ0FBbEI7QUFDRDs7QUFDRCwwQ0FBbUJGLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTCxRQUFaLENBQW5CLHFDQUEwQztBQUFyQyxjQUFNUixLQUFJLHFCQUFWO0FBQ0hXLFVBQUFBLFFBQVEsQ0FBQ1gsS0FBRCxDQUFSLEdBQWlCRyxDQUFDLENBQUMsUUFBRCxFQUFXLHdCQUFYLEVBQXFDO0FBQ3JEYSxZQUFBQSxLQUFLLEVBQUVSLFFBQVEsQ0FBQ1IsS0FBRDtBQURzQyxXQUFyQyxDQUFsQjtBQUdEOztBQVptQjtBQUFBO0FBQUE7O0FBQUE7QUFhcEIsK0JBQW1CVSxPQUFuQiw4SEFBNEI7QUFBQSxnQkFBakJWLE1BQWlCO0FBQzFCVyxZQUFBQSxRQUFRLENBQUNYLE1BQUQsQ0FBUixHQUFpQkcsQ0FBQyxDQUFDLFFBQUQsRUFBVyxxQkFBWCxDQUFsQjtBQUNEO0FBZm1CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBZ0JwQixlQUFPUSxRQUFQO0FBQ0Q7QUF6Q3dCO0FBQUE7QUFBQSxJQUtGZCxTQUxFOztBQTRDM0IsU0FBT0MsVUFBUDtBQUNEOztBQUVEbUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIsUUFBakIiLCJzb3VyY2VSb290IjoiLi4vbGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZnVuY3Rpb24gZXJyb3JNaXhcbiAqIEBtZW1iZXJPZiBtb2R1bGU6QHRoZS0vc2NlbmUubWl4aW5zXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBCYXNlQ2xhc3NcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn0gTWl4ZWRDbGFzc1xuICovXG4ndXNlIHN0cmljdCdcblxuLyoqIEBsZW5kcyBtb2R1bGU6QHRoZS0vc2NlbmUubWl4aW5zLmVycm9yTWl4ICovXG5mdW5jdGlvbiBlcnJvck1peChCYXNlQ2xhc3MpIHtcbiAgLyoqXG4gICAqIEBtZW1iZXJPZiBtb2R1bGU6QHRoZS0vc2NlbmUubWl4aW5zLmdvTWl4XG4gICAqIEBpbm5lclxuICAgKi9cbiAgY2xhc3MgRXJyb3JNaXhlZCBleHRlbmRzIEJhc2VDbGFzcyB7XG4gICAgY2F0Y2hFbnRyeUVycm9yKGVycikge1xuICAgICAgc3dpdGNoIChlcnIubmFtZSkge1xuICAgICAgICBjYXNlICdQb2xpY3lFcnJvcic6IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVBvbGljeUVycm9yKGVycilcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IGVyclxuICAgICAgfVxuICAgIH1cblxuICAgIHBhcnNlQXBwRXJyb3IoZXJyLCBvcHRpb25zID0ge30pIHtcbiAgICAgIGNvbnN0IHsgbCB9ID0gdGhpc1xuICAgICAgbGV0IHsgZmllbGQsIG1lc3NhZ2VLZXkgPSBvcHRpb25zLmRlZmF1bHRNZXNzYWdlS2V5IH0gPSBlcnIuZGV0YWlsXG4gICAgICByZXR1cm4ge1xuICAgICAgICBbZmllbGRdOiBsKCdlcnJvcnMnLCBtZXNzYWdlS2V5KSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZVBvbGljeUVycm9yKGVycikge1xuICAgICAgY29uc3QgeyBsIH0gPSB0aGlzXG4gICAgICBjb25zdCB7IGNvbmZsaWN0ID0ge30sIGZhaWx1cmVzID0ge30sIG1pc3NpbmcgPSBbXSB9ID0gZXJyLmRldGFpbFxuICAgICAgY29uc3QgbWVzc2FnZXMgPSB7fVxuICAgICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGZhaWx1cmVzKSkge1xuICAgICAgICBjb25zdCBmYWlsdXJlID0gZmFpbHVyZXNbbmFtZV1cbiAgICAgICAgbWVzc2FnZXNbbmFtZV0gPSBsKCdlcnJvcnMnLCBmYWlsdXJlLnJlYXNvbiwgZmFpbHVyZSlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhjb25mbGljdCkpIHtcbiAgICAgICAgbWVzc2FnZXNbbmFtZV0gPSBsKCdlcnJvcnMnLCAnVU5JUVVFX1ZJT0xBVElPTl9FUlJPUicsIHtcbiAgICAgICAgICB2YWx1ZTogY29uZmxpY3RbbmFtZV0sXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbWlzc2luZykge1xuICAgICAgICBtZXNzYWdlc1tuYW1lXSA9IGwoJ2Vycm9ycycsICdWQUxVRV9NSVNTSU5HX0VSUk9SJylcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXNzYWdlc1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBFcnJvck1peGVkXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXJyb3JNaXhcbiJdfQ==