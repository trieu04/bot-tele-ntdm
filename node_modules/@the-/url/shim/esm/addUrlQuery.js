'use strict';
/**
 * Add query to url string
 * @memberof module:@the-/url
 * @function addQuery
 * @param {string} urlString - URL to add
 * @param {Object} query - Query to add
 * @returns {string} Added url string
 */

import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { get } from 'bwindow';
import qs from 'qs';
/** @lends addUrlQuery */

function addUrlQuery(urlString) {
  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var isRelative = urlString.match(/^\//);
  var url = isRelative ? new URL(urlString, get('location.origin') || 'relative:///') : new URL(urlString);
  var queryString = url.search.replace(/^\?/, '');
  url.search = qs.stringify(_objectSpread({}, qs.parse(queryString), {}, query));
  return isRelative ? [url.pathname, url.search].join('') : url.href;
}

export default addUrlQuery;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZFVybFF1ZXJ5LmpzIl0sIm5hbWVzIjpbImdldCIsInFzIiwiYWRkVXJsUXVlcnkiLCJ1cmxTdHJpbmciLCJxdWVyeSIsImlzUmVsYXRpdmUiLCJtYXRjaCIsInVybCIsIlVSTCIsInF1ZXJ5U3RyaW5nIiwic2VhcmNoIiwicmVwbGFjZSIsInN0cmluZ2lmeSIsInBhcnNlIiwicGF0aG5hbWUiLCJqb2luIiwiaHJlZiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Ozs7Ozs7Ozs7Ozs7O0FBUUEsU0FBUUEsR0FBUixRQUFrQixTQUFsQjtBQUVBLE9BQU9DLEVBQVAsTUFBZSxJQUFmO0FBRUE7O0FBQ0EsU0FBU0MsV0FBVCxDQUFxQkMsU0FBckIsRUFBNEM7QUFBQSxNQUFaQyxLQUFZLHVFQUFKLEVBQUk7QUFDMUMsTUFBTUMsVUFBVSxHQUFHRixTQUFTLENBQUNHLEtBQVYsQ0FBZ0IsS0FBaEIsQ0FBbkI7QUFDQSxNQUFNQyxHQUFHLEdBQUdGLFVBQVUsR0FDbEIsSUFBSUcsR0FBSixDQUFRTCxTQUFSLEVBQW1CSCxHQUFHLENBQUMsaUJBQUQsQ0FBSCxJQUEwQixjQUE3QyxDQURrQixHQUVsQixJQUFJUSxHQUFKLENBQVFMLFNBQVIsQ0FGSjtBQUdBLE1BQU1NLFdBQVcsR0FBR0YsR0FBRyxDQUFDRyxNQUFKLENBQVdDLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsRUFBMUIsQ0FBcEI7QUFDQUosRUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQWFULEVBQUUsQ0FBQ1csU0FBSCxtQkFBa0JYLEVBQUUsQ0FBQ1ksS0FBSCxDQUFTSixXQUFULENBQWxCLE1BQTRDTCxLQUE1QyxFQUFiO0FBQ0EsU0FBT0MsVUFBVSxHQUFHLENBQUNFLEdBQUcsQ0FBQ08sUUFBTCxFQUFlUCxHQUFHLENBQUNHLE1BQW5CLEVBQTJCSyxJQUEzQixDQUFnQyxFQUFoQyxDQUFILEdBQXlDUixHQUFHLENBQUNTLElBQTlEO0FBQ0Q7O0FBRUQsZUFBZWQsV0FBZiIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi92YXIvZm9sZGVycy9rZi9fMXZ5a21rZDZwOV85NzFzZnRjY2hwNjgwMDAwZ24vVC90bXAtNTg2OTh2NnNLaVJrUXVDclUiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBBZGQgcXVlcnkgdG8gdXJsIHN0cmluZ1xuICogQG1lbWJlcm9mIG1vZHVsZTpAdGhlLS91cmxcbiAqIEBmdW5jdGlvbiBhZGRRdWVyeVxuICogQHBhcmFtIHtzdHJpbmd9IHVybFN0cmluZyAtIFVSTCB0byBhZGRcbiAqIEBwYXJhbSB7T2JqZWN0fSBxdWVyeSAtIFF1ZXJ5IHRvIGFkZFxuICogQHJldHVybnMge3N0cmluZ30gQWRkZWQgdXJsIHN0cmluZ1xuICovXG5pbXBvcnQge2dldH0gZnJvbSAnYndpbmRvdyc7XG5cbmltcG9ydCBxcyBmcm9tICdxcyc7XG5cbi8qKiBAbGVuZHMgYWRkVXJsUXVlcnkgKi9cbmZ1bmN0aW9uIGFkZFVybFF1ZXJ5KHVybFN0cmluZywgcXVlcnkgPSB7fSkge1xuICBjb25zdCBpc1JlbGF0aXZlID0gdXJsU3RyaW5nLm1hdGNoKC9eXFwvLylcbiAgY29uc3QgdXJsID0gaXNSZWxhdGl2ZVxuICAgID8gbmV3IFVSTCh1cmxTdHJpbmcsIGdldCgnbG9jYXRpb24ub3JpZ2luJykgfHwgJ3JlbGF0aXZlOi8vLycpXG4gICAgOiBuZXcgVVJMKHVybFN0cmluZylcbiAgY29uc3QgcXVlcnlTdHJpbmcgPSB1cmwuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJylcbiAgdXJsLnNlYXJjaCA9IHFzLnN0cmluZ2lmeSh7IC4uLnFzLnBhcnNlKHF1ZXJ5U3RyaW5nKSwgLi4ucXVlcnkgfSlcbiAgcmV0dXJuIGlzUmVsYXRpdmUgPyBbdXJsLnBhdGhuYW1lLCB1cmwuc2VhcmNoXS5qb2luKCcnKSA6IHVybC5ocmVmXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFVybFF1ZXJ5O1xuIl19