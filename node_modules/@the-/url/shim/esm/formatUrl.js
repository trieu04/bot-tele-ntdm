'use strict';

import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _toArray from "@babel/runtime/helpers/toArray";
import { get } from 'bwindow';
import { unlessProduction } from '@the-/check-env';
var PARAM_PREFIX = /^:/;
/**
 * Format urls
 * @memberof module:@the-/url
 * @function formatUrl
 * @param {string} urlString - URL format string
 * @param {Object} [params={}] - Params to inject
 * @returns {string} Formatted string
 */

function formatUrl(urlString) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var isRelative = urlString.match(/^\//);
  var url = isRelative ? new URL(urlString, get('location.origin') || 'relative:///') : new URL(urlString);
  var pathname = url.pathname,
      search = url.search;
  var paramsKeys = Object.keys(params);
  var replaced = {};

  var injectParams = function injectParams(c) {
    if (PARAM_PREFIX.test(c)) {
      var componentKey = c.replace(PARAM_PREFIX, '').split('.');

      var _componentKey = _toArray(componentKey),
          name = _componentKey[0],
          extensions = _componentKey.slice(1);

      if (!paramsKeys.includes(name)) {
        unlessProduction(function () {
          return console.warn("[the-url] Failed to resolve `".concat(c, "` ( in `").concat(urlString, "` )"));
        });
        return c;
      }

      var value = encodeURIComponent(params[name]);
      replaced[name] = value;
      return [value].concat(_toConsumableArray(extensions)).join('.');
    }

    return c;
  };

  url.pathname = pathname.split(/\//g).map(injectParams).join('/');
  url.search = search && search.split('&').map(function (keyValue) {
    var _keyValue$split = keyValue.split('='),
        _keyValue$split2 = _slicedToArray(_keyValue$split, 2),
        key = _keyValue$split2[0],
        value = _keyValue$split2[1];

    return [key, value].map(injectParams).join('=');
  }).join('&');
  unlessProduction(function () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = paramsKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var name = _step.value;

        // eslint-disable-next-line no-prototype-builtins
        if (!replaced.hasOwnProperty(name)) {
          console.warn("[the-url] Parameter `".concat(name, "` is never used ( for `").concat(urlString, "` )"));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return isRelative ? [url.pathname, url.search].join('') : url.href;
}

export default formatUrl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdFVybC5qcyJdLCJuYW1lcyI6WyJnZXQiLCJ1bmxlc3NQcm9kdWN0aW9uIiwiUEFSQU1fUFJFRklYIiwiZm9ybWF0VXJsIiwidXJsU3RyaW5nIiwicGFyYW1zIiwiaXNSZWxhdGl2ZSIsIm1hdGNoIiwidXJsIiwiVVJMIiwicGF0aG5hbWUiLCJzZWFyY2giLCJwYXJhbXNLZXlzIiwiT2JqZWN0Iiwia2V5cyIsInJlcGxhY2VkIiwiaW5qZWN0UGFyYW1zIiwiYyIsInRlc3QiLCJjb21wb25lbnRLZXkiLCJyZXBsYWNlIiwic3BsaXQiLCJuYW1lIiwiZXh0ZW5zaW9ucyIsImluY2x1ZGVzIiwiY29uc29sZSIsIndhcm4iLCJ2YWx1ZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJtYXAiLCJrZXlWYWx1ZSIsImtleSIsImhhc093blByb3BlcnR5IiwiaHJlZiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBRUEsU0FBUUEsR0FBUixRQUFrQixTQUFsQjtBQUNBLFNBQVFDLGdCQUFSLFFBQStCLGlCQUEvQjtBQUVBLElBQU1DLFlBQVksR0FBRyxJQUFyQjtBQUVBOzs7Ozs7Ozs7QUFRQSxTQUFTQyxTQUFULENBQW1CQyxTQUFuQixFQUEyQztBQUFBLE1BQWJDLE1BQWEsdUVBQUosRUFBSTtBQUN6QyxNQUFNQyxVQUFVLEdBQUdGLFNBQVMsQ0FBQ0csS0FBVixDQUFnQixLQUFoQixDQUFuQjtBQUNBLE1BQU1DLEdBQUcsR0FBR0YsVUFBVSxHQUNsQixJQUFJRyxHQUFKLENBQVFMLFNBQVIsRUFBbUJKLEdBQUcsQ0FBQyxpQkFBRCxDQUFILElBQTBCLGNBQTdDLENBRGtCLEdBRWxCLElBQUlTLEdBQUosQ0FBUUwsU0FBUixDQUZKO0FBRnlDLE1BS2pDTSxRQUxpQyxHQUtaRixHQUxZLENBS2pDRSxRQUxpQztBQUFBLE1BS3ZCQyxNQUx1QixHQUtaSCxHQUxZLENBS3ZCRyxNQUx1QjtBQU16QyxNQUFNQyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxNQUFaLENBQW5CO0FBQ0EsTUFBTVUsUUFBUSxHQUFHLEVBQWpCOztBQUNBLE1BQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNDLENBQUQsRUFBTztBQUMxQixRQUFJZixZQUFZLENBQUNnQixJQUFiLENBQWtCRCxDQUFsQixDQUFKLEVBQTBCO0FBQ3hCLFVBQU1FLFlBQVksR0FBR0YsQ0FBQyxDQUFDRyxPQUFGLENBQVVsQixZQUFWLEVBQXdCLEVBQXhCLEVBQTRCbUIsS0FBNUIsQ0FBa0MsR0FBbEMsQ0FBckI7O0FBRHdCLG1DQUVNRixZQUZOO0FBQUEsVUFFakJHLElBRmlCO0FBQUEsVUFFUkMsVUFGUTs7QUFHeEIsVUFBSSxDQUFDWCxVQUFVLENBQUNZLFFBQVgsQ0FBb0JGLElBQXBCLENBQUwsRUFBZ0M7QUFDOUJyQixRQUFBQSxnQkFBZ0IsQ0FBQztBQUFBLGlCQUNmd0IsT0FBTyxDQUFDQyxJQUFSLHdDQUNtQ1QsQ0FEbkMscUJBQ2lEYixTQURqRCxTQURlO0FBQUEsU0FBRCxDQUFoQjtBQUtBLGVBQU9hLENBQVA7QUFDRDs7QUFFRCxVQUFNVSxLQUFLLEdBQUdDLGtCQUFrQixDQUFDdkIsTUFBTSxDQUFDaUIsSUFBRCxDQUFQLENBQWhDO0FBQ0FQLE1BQUFBLFFBQVEsQ0FBQ08sSUFBRCxDQUFSLEdBQWlCSyxLQUFqQjtBQUNBLGFBQU8sQ0FBQ0EsS0FBRCw0QkFBV0osVUFBWCxHQUF1Qk0sSUFBdkIsQ0FBNEIsR0FBNUIsQ0FBUDtBQUNEOztBQUVELFdBQU9aLENBQVA7QUFDRCxHQW5CRDs7QUFvQkFULEVBQUFBLEdBQUcsQ0FBQ0UsUUFBSixHQUFlQSxRQUFRLENBQ3BCVyxLQURZLENBQ04sS0FETSxFQUVaUyxHQUZZLENBRVJkLFlBRlEsRUFHWmEsSUFIWSxDQUdQLEdBSE8sQ0FBZjtBQUlBckIsRUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQ0VBLE1BQU0sSUFDTkEsTUFBTSxDQUNIVSxLQURILENBQ1MsR0FEVCxFQUVHUyxHQUZILENBRU8sVUFBQ0MsUUFBRCxFQUFjO0FBQUEsMEJBQ0lBLFFBQVEsQ0FBQ1YsS0FBVCxDQUFlLEdBQWYsQ0FESjtBQUFBO0FBQUEsUUFDVlcsR0FEVTtBQUFBLFFBQ0xMLEtBREs7O0FBRWpCLFdBQU8sQ0FBQ0ssR0FBRCxFQUFNTCxLQUFOLEVBQWFHLEdBQWIsQ0FBaUJkLFlBQWpCLEVBQStCYSxJQUEvQixDQUFvQyxHQUFwQyxDQUFQO0FBQ0QsR0FMSCxFQU1HQSxJQU5ILENBTVEsR0FOUixDQUZGO0FBVUE1QixFQUFBQSxnQkFBZ0IsQ0FBQyxZQUFNO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ3JCLDJCQUFtQlcsVUFBbkIsOEhBQStCO0FBQUEsWUFBcEJVLElBQW9COztBQUM3QjtBQUNBLFlBQUksQ0FBQ1AsUUFBUSxDQUFDa0IsY0FBVCxDQUF3QlgsSUFBeEIsQ0FBTCxFQUFvQztBQUNsQ0csVUFBQUEsT0FBTyxDQUFDQyxJQUFSLGdDQUMyQkosSUFEM0Isb0NBQzJEbEIsU0FEM0Q7QUFHRDtBQUNGO0FBUm9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFTdEIsR0FUZSxDQUFoQjtBQVdBLFNBQU9FLFVBQVUsR0FBRyxDQUFDRSxHQUFHLENBQUNFLFFBQUwsRUFBZUYsR0FBRyxDQUFDRyxNQUFuQixFQUEyQmtCLElBQTNCLENBQWdDLEVBQWhDLENBQUgsR0FBeUNyQixHQUFHLENBQUMwQixJQUE5RDtBQUNEOztBQUVELGVBQWUvQixTQUFmIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Zhci9mb2xkZXJzL2tmL18xdnlrbWtkNnA5Xzk3MXNmdGNjaHA2ODAwMDBnbi9UL3RtcC01ODY5OHY2c0tpUmtRdUNyVSIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQge2dldH0gZnJvbSAnYndpbmRvdyc7XG5pbXBvcnQge3VubGVzc1Byb2R1Y3Rpb259IGZyb20gJ0B0aGUtL2NoZWNrLWVudic7XG5cbmNvbnN0IFBBUkFNX1BSRUZJWCA9IC9eOi9cblxuLyoqXG4gKiBGb3JtYXQgdXJsc1xuICogQG1lbWJlcm9mIG1vZHVsZTpAdGhlLS91cmxcbiAqIEBmdW5jdGlvbiBmb3JtYXRVcmxcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxTdHJpbmcgLSBVUkwgZm9ybWF0IHN0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXM9e31dIC0gUGFyYW1zIHRvIGluamVjdFxuICogQHJldHVybnMge3N0cmluZ30gRm9ybWF0dGVkIHN0cmluZ1xuICovXG5mdW5jdGlvbiBmb3JtYXRVcmwodXJsU3RyaW5nLCBwYXJhbXMgPSB7fSkge1xuICBjb25zdCBpc1JlbGF0aXZlID0gdXJsU3RyaW5nLm1hdGNoKC9eXFwvLylcbiAgY29uc3QgdXJsID0gaXNSZWxhdGl2ZVxuICAgID8gbmV3IFVSTCh1cmxTdHJpbmcsIGdldCgnbG9jYXRpb24ub3JpZ2luJykgfHwgJ3JlbGF0aXZlOi8vLycpXG4gICAgOiBuZXcgVVJMKHVybFN0cmluZylcbiAgY29uc3QgeyBwYXRobmFtZSwgc2VhcmNoIH0gPSB1cmxcbiAgY29uc3QgcGFyYW1zS2V5cyA9IE9iamVjdC5rZXlzKHBhcmFtcylcbiAgY29uc3QgcmVwbGFjZWQgPSB7fVxuICBjb25zdCBpbmplY3RQYXJhbXMgPSAoYykgPT4ge1xuICAgIGlmIChQQVJBTV9QUkVGSVgudGVzdChjKSkge1xuICAgICAgY29uc3QgY29tcG9uZW50S2V5ID0gYy5yZXBsYWNlKFBBUkFNX1BSRUZJWCwgJycpLnNwbGl0KCcuJylcbiAgICAgIGNvbnN0IFtuYW1lLCAuLi5leHRlbnNpb25zXSA9IGNvbXBvbmVudEtleVxuICAgICAgaWYgKCFwYXJhbXNLZXlzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgIHVubGVzc1Byb2R1Y3Rpb24oKCkgPT5cbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBgW3RoZS11cmxdIEZhaWxlZCB0byByZXNvbHZlIFxcYCR7Y31cXGAgKCBpbiBcXGAke3VybFN0cmluZ31cXGAgKWAsXG4gICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNbbmFtZV0pXG4gICAgICByZXBsYWNlZFtuYW1lXSA9IHZhbHVlXG4gICAgICByZXR1cm4gW3ZhbHVlLCAuLi5leHRlbnNpb25zXS5qb2luKCcuJylcbiAgICB9XG5cbiAgICByZXR1cm4gY1xuICB9XG4gIHVybC5wYXRobmFtZSA9IHBhdGhuYW1lXG4gICAgLnNwbGl0KC9cXC8vZylcbiAgICAubWFwKGluamVjdFBhcmFtcylcbiAgICAuam9pbignLycpXG4gIHVybC5zZWFyY2ggPVxuICAgIHNlYXJjaCAmJlxuICAgIHNlYXJjaFxuICAgICAgLnNwbGl0KCcmJylcbiAgICAgIC5tYXAoKGtleVZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGtleVZhbHVlLnNwbGl0KCc9JylcbiAgICAgICAgcmV0dXJuIFtrZXksIHZhbHVlXS5tYXAoaW5qZWN0UGFyYW1zKS5qb2luKCc9JylcbiAgICAgIH0pXG4gICAgICAuam9pbignJicpXG5cbiAgdW5sZXNzUHJvZHVjdGlvbigoKSA9PiB7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHBhcmFtc0tleXMpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIGlmICghcmVwbGFjZWQuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbdGhlLXVybF0gUGFyYW1ldGVyIFxcYCR7bmFtZX1cXGAgaXMgbmV2ZXIgdXNlZCAoIGZvciBcXGAke3VybFN0cmluZ31cXGAgKWAsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGlzUmVsYXRpdmUgPyBbdXJsLnBhdGhuYW1lLCB1cmwuc2VhcmNoXS5qb2luKCcnKSA6IHVybC5ocmVmXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFVybDtcbiJdfQ==