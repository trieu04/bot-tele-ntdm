'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _require = require('bwindow'),
    get = _require.get;

var _require2 = require('@the-/check-env'),
    unlessProduction = _require2.unlessProduction;

var PARAM_PREFIX = /^:/;
/**
 * Format urls
 * @memberof module:@the-/url
 * @function formatUrl
 * @param {string} urlString - URL format string
 * @param {Object} [params={}] - Params to inject
 * @returns {string} Formatted string
 */

function formatUrl(urlString) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var isRelative = urlString.match(/^\//);
  var url = isRelative ? new URL(urlString, get('location.origin') || 'relative:///') : new URL(urlString);
  var pathname = url.pathname,
      search = url.search;
  var paramsKeys = Object.keys(params);
  var replaced = {};

  var injectParams = function injectParams(c) {
    if (PARAM_PREFIX.test(c)) {
      var componentKey = c.replace(PARAM_PREFIX, '').split('.');

      var _componentKey = (0, _toArray2["default"])(componentKey),
          name = _componentKey[0],
          extensions = _componentKey.slice(1);

      if (!paramsKeys.includes(name)) {
        unlessProduction(function () {
          return console.warn("[the-url] Failed to resolve `".concat(c, "` ( in `").concat(urlString, "` )"));
        });
        return c;
      }

      var value = encodeURIComponent(params[name]);
      replaced[name] = value;
      return [value].concat((0, _toConsumableArray2["default"])(extensions)).join('.');
    }

    return c;
  };

  url.pathname = pathname.split(/\//g).map(injectParams).join('/');
  url.search = search && search.split('&').map(function (keyValue) {
    var _keyValue$split = keyValue.split('='),
        _keyValue$split2 = (0, _slicedToArray2["default"])(_keyValue$split, 2),
        key = _keyValue$split2[0],
        value = _keyValue$split2[1];

    return [key, value].map(injectParams).join('=');
  }).join('&');
  unlessProduction(function () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = paramsKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var name = _step.value;

        // eslint-disable-next-line no-prototype-builtins
        if (!replaced.hasOwnProperty(name)) {
          console.warn("[the-url] Parameter `".concat(name, "` is never used ( for `").concat(urlString, "` )"));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  return isRelative ? [url.pathname, url.search].join('') : url.href;
}

module.exports = formatUrl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1hdFVybC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiZ2V0IiwidW5sZXNzUHJvZHVjdGlvbiIsIlBBUkFNX1BSRUZJWCIsImZvcm1hdFVybCIsInVybFN0cmluZyIsInBhcmFtcyIsImlzUmVsYXRpdmUiLCJtYXRjaCIsInVybCIsIlVSTCIsInBhdGhuYW1lIiwic2VhcmNoIiwicGFyYW1zS2V5cyIsIk9iamVjdCIsImtleXMiLCJyZXBsYWNlZCIsImluamVjdFBhcmFtcyIsImMiLCJ0ZXN0IiwiY29tcG9uZW50S2V5IiwicmVwbGFjZSIsInNwbGl0IiwibmFtZSIsImV4dGVuc2lvbnMiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJ3YXJuIiwidmFsdWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwibWFwIiwia2V5VmFsdWUiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImhyZWYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztlQUVnQkEsT0FBTyxDQUFDLFNBQUQsQztJQUFmQyxHLFlBQUFBLEc7O2dCQUNxQkQsT0FBTyxDQUFDLGlCQUFELEM7SUFBNUJFLGdCLGFBQUFBLGdCOztBQUVSLElBQU1DLFlBQVksR0FBRyxJQUFyQjtBQUVBOzs7Ozs7Ozs7QUFRQSxTQUFTQyxTQUFULENBQW1CQyxTQUFuQixFQUEyQztBQUFBLE1BQWJDLE1BQWEsdUVBQUosRUFBSTtBQUN6QyxNQUFNQyxVQUFVLEdBQUdGLFNBQVMsQ0FBQ0csS0FBVixDQUFnQixLQUFoQixDQUFuQjtBQUNBLE1BQU1DLEdBQUcsR0FBR0YsVUFBVSxHQUNsQixJQUFJRyxHQUFKLENBQVFMLFNBQVIsRUFBbUJKLEdBQUcsQ0FBQyxpQkFBRCxDQUFILElBQTBCLGNBQTdDLENBRGtCLEdBRWxCLElBQUlTLEdBQUosQ0FBUUwsU0FBUixDQUZKO0FBRnlDLE1BS2pDTSxRQUxpQyxHQUtaRixHQUxZLENBS2pDRSxRQUxpQztBQUFBLE1BS3ZCQyxNQUx1QixHQUtaSCxHQUxZLENBS3ZCRyxNQUx1QjtBQU16QyxNQUFNQyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxNQUFaLENBQW5CO0FBQ0EsTUFBTVUsUUFBUSxHQUFHLEVBQWpCOztBQUNBLE1BQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNDLENBQUQsRUFBTztBQUMxQixRQUFJZixZQUFZLENBQUNnQixJQUFiLENBQWtCRCxDQUFsQixDQUFKLEVBQTBCO0FBQ3hCLFVBQU1FLFlBQVksR0FBR0YsQ0FBQyxDQUFDRyxPQUFGLENBQVVsQixZQUFWLEVBQXdCLEVBQXhCLEVBQTRCbUIsS0FBNUIsQ0FBa0MsR0FBbEMsQ0FBckI7O0FBRHdCLG9EQUVNRixZQUZOO0FBQUEsVUFFakJHLElBRmlCO0FBQUEsVUFFUkMsVUFGUTs7QUFHeEIsVUFBSSxDQUFDWCxVQUFVLENBQUNZLFFBQVgsQ0FBb0JGLElBQXBCLENBQUwsRUFBZ0M7QUFDOUJyQixRQUFBQSxnQkFBZ0IsQ0FBQztBQUFBLGlCQUNmd0IsT0FBTyxDQUFDQyxJQUFSLHdDQUNtQ1QsQ0FEbkMscUJBQ2lEYixTQURqRCxTQURlO0FBQUEsU0FBRCxDQUFoQjtBQUtBLGVBQU9hLENBQVA7QUFDRDs7QUFFRCxVQUFNVSxLQUFLLEdBQUdDLGtCQUFrQixDQUFDdkIsTUFBTSxDQUFDaUIsSUFBRCxDQUFQLENBQWhDO0FBQ0FQLE1BQUFBLFFBQVEsQ0FBQ08sSUFBRCxDQUFSLEdBQWlCSyxLQUFqQjtBQUNBLGFBQU8sQ0FBQ0EsS0FBRCw2Q0FBV0osVUFBWCxHQUF1Qk0sSUFBdkIsQ0FBNEIsR0FBNUIsQ0FBUDtBQUNEOztBQUVELFdBQU9aLENBQVA7QUFDRCxHQW5CRDs7QUFvQkFULEVBQUFBLEdBQUcsQ0FBQ0UsUUFBSixHQUFlQSxRQUFRLENBQ3BCVyxLQURZLENBQ04sS0FETSxFQUVaUyxHQUZZLENBRVJkLFlBRlEsRUFHWmEsSUFIWSxDQUdQLEdBSE8sQ0FBZjtBQUlBckIsRUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQ0VBLE1BQU0sSUFDTkEsTUFBTSxDQUNIVSxLQURILENBQ1MsR0FEVCxFQUVHUyxHQUZILENBRU8sVUFBQ0MsUUFBRCxFQUFjO0FBQUEsMEJBQ0lBLFFBQVEsQ0FBQ1YsS0FBVCxDQUFlLEdBQWYsQ0FESjtBQUFBO0FBQUEsUUFDVlcsR0FEVTtBQUFBLFFBQ0xMLEtBREs7O0FBRWpCLFdBQU8sQ0FBQ0ssR0FBRCxFQUFNTCxLQUFOLEVBQWFHLEdBQWIsQ0FBaUJkLFlBQWpCLEVBQStCYSxJQUEvQixDQUFvQyxHQUFwQyxDQUFQO0FBQ0QsR0FMSCxFQU1HQSxJQU5ILENBTVEsR0FOUixDQUZGO0FBVUE1QixFQUFBQSxnQkFBZ0IsQ0FBQyxZQUFNO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ3JCLDJCQUFtQlcsVUFBbkIsOEhBQStCO0FBQUEsWUFBcEJVLElBQW9COztBQUM3QjtBQUNBLFlBQUksQ0FBQ1AsUUFBUSxDQUFDa0IsY0FBVCxDQUF3QlgsSUFBeEIsQ0FBTCxFQUFvQztBQUNsQ0csVUFBQUEsT0FBTyxDQUFDQyxJQUFSLGdDQUMyQkosSUFEM0Isb0NBQzJEbEIsU0FEM0Q7QUFHRDtBQUNGO0FBUm9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFTdEIsR0FUZSxDQUFoQjtBQVdBLFNBQU9FLFVBQVUsR0FBRyxDQUFDRSxHQUFHLENBQUNFLFFBQUwsRUFBZUYsR0FBRyxDQUFDRyxNQUFuQixFQUEyQmtCLElBQTNCLENBQWdDLEVBQWhDLENBQUgsR0FBeUNyQixHQUFHLENBQUMwQixJQUE5RDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQyxTQUFqQiIsInNvdXJjZVJvb3QiOiIuLi9saWIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBnZXQgfSA9IHJlcXVpcmUoJ2J3aW5kb3cnKVxuY29uc3QgeyB1bmxlc3NQcm9kdWN0aW9uIH0gPSByZXF1aXJlKCdAdGhlLS9jaGVjay1lbnYnKVxuXG5jb25zdCBQQVJBTV9QUkVGSVggPSAvXjovXG5cbi8qKlxuICogRm9ybWF0IHVybHNcbiAqIEBtZW1iZXJvZiBtb2R1bGU6QHRoZS0vdXJsXG4gKiBAZnVuY3Rpb24gZm9ybWF0VXJsXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsU3RyaW5nIC0gVVJMIGZvcm1hdCBzdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zPXt9XSAtIFBhcmFtcyB0byBpbmplY3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZm9ybWF0VXJsKHVybFN0cmluZywgcGFyYW1zID0ge30pIHtcbiAgY29uc3QgaXNSZWxhdGl2ZSA9IHVybFN0cmluZy5tYXRjaCgvXlxcLy8pXG4gIGNvbnN0IHVybCA9IGlzUmVsYXRpdmVcbiAgICA/IG5ldyBVUkwodXJsU3RyaW5nLCBnZXQoJ2xvY2F0aW9uLm9yaWdpbicpIHx8ICdyZWxhdGl2ZTovLy8nKVxuICAgIDogbmV3IFVSTCh1cmxTdHJpbmcpXG4gIGNvbnN0IHsgcGF0aG5hbWUsIHNlYXJjaCB9ID0gdXJsXG4gIGNvbnN0IHBhcmFtc0tleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpXG4gIGNvbnN0IHJlcGxhY2VkID0ge31cbiAgY29uc3QgaW5qZWN0UGFyYW1zID0gKGMpID0+IHtcbiAgICBpZiAoUEFSQU1fUFJFRklYLnRlc3QoYykpIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudEtleSA9IGMucmVwbGFjZShQQVJBTV9QUkVGSVgsICcnKS5zcGxpdCgnLicpXG4gICAgICBjb25zdCBbbmFtZSwgLi4uZXh0ZW5zaW9uc10gPSBjb21wb25lbnRLZXlcbiAgICAgIGlmICghcGFyYW1zS2V5cy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICB1bmxlc3NQcm9kdWN0aW9uKCgpID0+XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgYFt0aGUtdXJsXSBGYWlsZWQgdG8gcmVzb2x2ZSBcXGAke2N9XFxgICggaW4gXFxgJHt1cmxTdHJpbmd9XFxgIClgLFxuICAgICAgICAgICksXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsdWUgPSBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW25hbWVdKVxuICAgICAgcmVwbGFjZWRbbmFtZV0gPSB2YWx1ZVxuICAgICAgcmV0dXJuIFt2YWx1ZSwgLi4uZXh0ZW5zaW9uc10uam9pbignLicpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNcbiAgfVxuICB1cmwucGF0aG5hbWUgPSBwYXRobmFtZVxuICAgIC5zcGxpdCgvXFwvL2cpXG4gICAgLm1hcChpbmplY3RQYXJhbXMpXG4gICAgLmpvaW4oJy8nKVxuICB1cmwuc2VhcmNoID1cbiAgICBzZWFyY2ggJiZcbiAgICBzZWFyY2hcbiAgICAgIC5zcGxpdCgnJicpXG4gICAgICAubWFwKChrZXlWYWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBrZXlWYWx1ZS5zcGxpdCgnPScpXG4gICAgICAgIHJldHVybiBba2V5LCB2YWx1ZV0ubWFwKGluamVjdFBhcmFtcykuam9pbignPScpXG4gICAgICB9KVxuICAgICAgLmpvaW4oJyYnKVxuXG4gIHVubGVzc1Byb2R1Y3Rpb24oKCkgPT4ge1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBwYXJhbXNLZXlzKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICBpZiAoIXJlcGxhY2VkLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW3RoZS11cmxdIFBhcmFtZXRlciBcXGAke25hbWV9XFxgIGlzIG5ldmVyIHVzZWQgKCBmb3IgXFxgJHt1cmxTdHJpbmd9XFxgIClgLFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBpc1JlbGF0aXZlID8gW3VybC5wYXRobmFtZSwgdXJsLnNlYXJjaF0uam9pbignJykgOiB1cmwuaHJlZlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdFVybFxuIl19