/**
 * Basic error
 * @memberOf module:@the-/error
 * @class TheError
 */
'use strict';
/** @lends TheError */

import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/wrapNativeSuper";

var TheError =
/*#__PURE__*/
function (_Error) {
  _inherits(TheError, _Error);

  function TheError(message) {
    var _this;

    var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, TheError);

    var _options$resolved = options.resolved,
        resolved = _options$resolved === void 0 ? false : _options$resolved;
    _this = _possibleConstructorReturn(this, _getPrototypeOf(TheError).call(this, message));
    _this.detail = detail;
    _this.status = _this.constructor.status || 400;
    _this.name = _this.constructor.errorName || _this.constructor.name || 'error';
    _this.resolved = resolved;
    return _this;
  }

  return TheError;
}(_wrapNativeSuper(Error));

TheError.errorName = 'Error';
TheError.status = 400;

TheError.withName = function (name) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$status = options.status,
      status = _options$status === void 0 ? 400 : _options$status;
  return Object.assign(
  /*#__PURE__*/
  function (_TheError) {
    _inherits(NamedError, _TheError);

    function NamedError() {
      _classCallCheck(this, NamedError);

      return _possibleConstructorReturn(this, _getPrototypeOf(NamedError).apply(this, arguments));
    }

    return NamedError;
  }(TheError), {
    errorName: name,
    status: status
  });
};

export default TheError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRoZUVycm9yLmpzIl0sIm5hbWVzIjpbIlRoZUVycm9yIiwibWVzc2FnZSIsImRldGFpbCIsIm9wdGlvbnMiLCJyZXNvbHZlZCIsInN0YXR1cyIsImNvbnN0cnVjdG9yIiwibmFtZSIsImVycm9yTmFtZSIsIkVycm9yIiwid2l0aE5hbWUiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBO0FBRUE7Ozs7Ozs7O0lBQ01BLFE7Ozs7O0FBQ0osb0JBQVlDLE9BQVosRUFBZ0Q7QUFBQTs7QUFBQSxRQUEzQkMsTUFBMkIsdUVBQWxCLEVBQWtCO0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJOztBQUFBOztBQUFBLDRCQUNqQkEsT0FEaUIsQ0FDdENDLFFBRHNDO0FBQUEsUUFDdENBLFFBRHNDLGtDQUMzQixLQUQyQjtBQUU5QyxrRkFBTUgsT0FBTjtBQUNBLFVBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFVBQUtHLE1BQUwsR0FBYyxNQUFLQyxXQUFMLENBQWlCRCxNQUFqQixJQUEyQixHQUF6QztBQUNBLFVBQUtFLElBQUwsR0FBWSxNQUFLRCxXQUFMLENBQWlCRSxTQUFqQixJQUE4QixNQUFLRixXQUFMLENBQWlCQyxJQUEvQyxJQUF1RCxPQUFuRTtBQUNBLFVBQUtILFFBQUwsR0FBZ0JBLFFBQWhCO0FBTjhDO0FBTy9DOzs7bUJBUm9CSyxLOztBQVd2QlQsUUFBUSxDQUFDUSxTQUFULEdBQXFCLE9BQXJCO0FBQ0FSLFFBQVEsQ0FBQ0ssTUFBVCxHQUFrQixHQUFsQjs7QUFFQUwsUUFBUSxDQUFDVSxRQUFULEdBQW9CLFVBQUNILElBQUQsRUFBd0I7QUFBQSxNQUFqQkosT0FBaUIsdUVBQVAsRUFBTztBQUFBLHdCQUNqQkEsT0FEaUIsQ0FDbENFLE1BRGtDO0FBQUEsTUFDbENBLE1BRGtDLGdDQUN6QixHQUR5QjtBQUUxQyxTQUFPTSxNQUFNLENBQUNDLE1BQVA7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUEsSUFBdUNaLFFBQXZDLEdBQW9EO0FBQ3pEUSxJQUFBQSxTQUFTLEVBQUVELElBRDhDO0FBRXpERixJQUFBQSxNQUFNLEVBQU5BO0FBRnlELEdBQXBELENBQVA7QUFJRCxDQU5EOztBQVFBLGVBQWVMLFFBQWYiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdmFyL2ZvbGRlcnMvdjMvcHM2a3JmYjEydzM3cXB5N2dkMHlocjg0MDAwMGduL1QvdG1wLTQ3OTUyZnNBVVU3UUlOS1NuIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNpYyBlcnJvclxuICogQG1lbWJlck9mIG1vZHVsZTpAdGhlLS9lcnJvclxuICogQGNsYXNzIFRoZUVycm9yXG4gKi9cbid1c2Ugc3RyaWN0J1xuXG4vKiogQGxlbmRzIFRoZUVycm9yICovXG5jbGFzcyBUaGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZGV0YWlsID0ge30sIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgcmVzb2x2ZWQgPSBmYWxzZSB9ID0gb3B0aW9uc1xuICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgdGhpcy5kZXRhaWwgPSBkZXRhaWxcbiAgICB0aGlzLnN0YXR1cyA9IHRoaXMuY29uc3RydWN0b3Iuc3RhdHVzIHx8IDQwMFxuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IuZXJyb3JOYW1lIHx8IHRoaXMuY29uc3RydWN0b3IubmFtZSB8fCAnZXJyb3InXG4gICAgdGhpcy5yZXNvbHZlZCA9IHJlc29sdmVkXG4gIH1cbn1cblxuVGhlRXJyb3IuZXJyb3JOYW1lID0gJ0Vycm9yJ1xuVGhlRXJyb3Iuc3RhdHVzID0gNDAwXG5cblRoZUVycm9yLndpdGhOYW1lID0gKG5hbWUsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IHN0YXR1cyA9IDQwMCB9ID0gb3B0aW9uc1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihjbGFzcyBOYW1lZEVycm9yIGV4dGVuZHMgVGhlRXJyb3Ige30sIHtcbiAgICBlcnJvck5hbWU6IG5hbWUsXG4gICAgc3RhdHVzLFxuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVFcnJvcjtcbiJdfQ==