// Code generated by coz. DO NOT EDIT.

/**
 * @module @the-/error
 * @version 15.4.0
 * @description Error for the-framework
 * @typicalname error
 * @license MIT
 */
'use strict';

import TheConflictError_ from './TheConflictError';
import TheError_ from './TheError';
import TheExpiredError_ from './TheExpiredError';
import TheForbiddenError_ from './TheForbiddenError';
import TheGoneError_ from './TheGoneError';
import TheInvalidParameterError_ from './TheInvalidParameterError';
import TheNotAcceptableError_ from './TheNotAcceptableError';
import TheNotFoundError_ from './TheNotFoundError';
import TheRequestTimeoutError_ from './TheRequestTimeoutError';
import TheServerRottenError_ from './TheServerRottenError';
import TheUnauthorizedError_ from './TheUnauthorizedError';
import create_ from './create';
import define_ from './define'; // `module.exports` overrides these `exports.*`, but still needs them for lebab (https://github.com/lebab/lebab)

export { TheConflictError_ as TheConflictError };
export { TheError_ as TheError };
export { TheExpiredError_ as TheExpiredError };
export { TheForbiddenError_ as TheForbiddenError };
export { TheGoneError_ as TheGoneError };
export { TheInvalidParameterError_ as TheInvalidParameterError };
export { TheNotAcceptableError_ as TheNotAcceptableError };
export { TheNotFoundError_ as TheNotFoundError };
export { TheRequestTimeoutError_ as TheRequestTimeoutError };
export { TheServerRottenError_ as TheServerRottenError };
export { TheUnauthorizedError_ as TheUnauthorizedError };
export { create_ as create };
export { define_ as define };
export default {
  TheConflictError: TheConflictError_,
  TheError: TheError_,
  TheExpiredError: TheExpiredError_,
  TheForbiddenError: TheForbiddenError_,
  TheGoneError: TheGoneError_,
  TheInvalidParameterError: TheInvalidParameterError_,
  TheNotAcceptableError: TheNotAcceptableError_,
  TheNotFoundError: TheNotFoundError_,
  TheRequestTimeoutError: TheRequestTimeoutError_,
  TheServerRottenError: TheServerRottenError_,
  TheUnauthorizedError: TheUnauthorizedError_,
  create: create_,
  define: define_
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlRoZUNvbmZsaWN0RXJyb3JfIiwiVGhlRXJyb3JfIiwiVGhlRXhwaXJlZEVycm9yXyIsIlRoZUZvcmJpZGRlbkVycm9yXyIsIlRoZUdvbmVFcnJvcl8iLCJUaGVJbnZhbGlkUGFyYW1ldGVyRXJyb3JfIiwiVGhlTm90QWNjZXB0YWJsZUVycm9yXyIsIlRoZU5vdEZvdW5kRXJyb3JfIiwiVGhlUmVxdWVzdFRpbWVvdXRFcnJvcl8iLCJUaGVTZXJ2ZXJSb3R0ZW5FcnJvcl8iLCJUaGVVbmF1dGhvcml6ZWRFcnJvcl8iLCJjcmVhdGVfIiwiZGVmaW5lXyIsIlRoZUNvbmZsaWN0RXJyb3IiLCJUaGVFcnJvciIsIlRoZUV4cGlyZWRFcnJvciIsIlRoZUZvcmJpZGRlbkVycm9yIiwiVGhlR29uZUVycm9yIiwiVGhlSW52YWxpZFBhcmFtZXRlckVycm9yIiwiVGhlTm90QWNjZXB0YWJsZUVycm9yIiwiVGhlTm90Rm91bmRFcnJvciIsIlRoZVJlcXVlc3RUaW1lb3V0RXJyb3IiLCJUaGVTZXJ2ZXJSb3R0ZW5FcnJvciIsIlRoZVVuYXV0aG9yaXplZEVycm9yIiwiY3JlYXRlIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7OztBQU9BOztBQUVBLE9BQU9BLGlCQUFQLE1BQThCLG9CQUE5QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QixtQkFBN0I7QUFDQSxPQUFPQyxrQkFBUCxNQUErQixxQkFBL0I7QUFDQSxPQUFPQyxhQUFQLE1BQTBCLGdCQUExQjtBQUNBLE9BQU9DLHlCQUFQLE1BQXNDLDRCQUF0QztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLHlCQUFuQztBQUNBLE9BQU9DLGlCQUFQLE1BQThCLG9CQUE5QjtBQUNBLE9BQU9DLHVCQUFQLE1BQW9DLDBCQUFwQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLHdCQUFsQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLHdCQUFsQztBQUNBLE9BQU9DLE9BQVAsTUFBb0IsVUFBcEI7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLFVBQXBCLEMsQ0FFQTs7QUFDQSxTQUFRWixpQkFBaUIsSUFBSWEsZ0JBQTdCO0FBRUEsU0FBUVosU0FBUyxJQUFJYSxRQUFyQjtBQUNBLFNBQVFaLGdCQUFnQixJQUFJYSxlQUE1QjtBQUNBLFNBQVFaLGtCQUFrQixJQUFJYSxpQkFBOUI7QUFDQSxTQUFRWixhQUFhLElBQUlhLFlBQXpCO0FBQ0EsU0FBUVoseUJBQXlCLElBQUlhLHdCQUFyQztBQUNBLFNBQVFaLHNCQUFzQixJQUFJYSxxQkFBbEM7QUFDQSxTQUFRWixpQkFBaUIsSUFBSWEsZ0JBQTdCO0FBQ0EsU0FBUVosdUJBQXVCLElBQUlhLHNCQUFuQztBQUNBLFNBQVFaLHFCQUFxQixJQUFJYSxvQkFBakM7QUFDQSxTQUFRWixxQkFBcUIsSUFBSWEsb0JBQWpDO0FBQ0EsU0FBUVosT0FBTyxJQUFJYSxNQUFuQjtBQUNBLFNBQVFaLE9BQU8sSUFBSWEsTUFBbkI7QUFFQSxlQUFlO0FBQ2JaLEVBQUFBLGdCQUFnQixFQUFFYixpQkFETDtBQUViYyxFQUFBQSxRQUFRLEVBQUViLFNBRkc7QUFHYmMsRUFBQUEsZUFBZSxFQUFFYixnQkFISjtBQUliYyxFQUFBQSxpQkFBaUIsRUFBRWIsa0JBSk47QUFLYmMsRUFBQUEsWUFBWSxFQUFFYixhQUxEO0FBTWJjLEVBQUFBLHdCQUF3QixFQUFFYix5QkFOYjtBQU9iYyxFQUFBQSxxQkFBcUIsRUFBRWIsc0JBUFY7QUFRYmMsRUFBQUEsZ0JBQWdCLEVBQUViLGlCQVJMO0FBU2JjLEVBQUFBLHNCQUFzQixFQUFFYix1QkFUWDtBQVViYyxFQUFBQSxvQkFBb0IsRUFBRWIscUJBVlQ7QUFXYmMsRUFBQUEsb0JBQW9CLEVBQUViLHFCQVhUO0FBWWJjLEVBQUFBLE1BQU0sRUFBRWIsT0FaSztBQWFiYyxFQUFBQSxNQUFNLEVBQUViO0FBYkssQ0FBZiIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi92YXIvZm9sZGVycy92My9wczZrcmZiMTJ3MzdxcHk3Z2QweWhyODQwMDAwZ24vVC90bXAtNDc5NTJmc0FVVTdRSU5LU24iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb2RlIGdlbmVyYXRlZCBieSBjb3ouIERPIE5PVCBFRElULlxuLyoqXG4gKiBAbW9kdWxlIEB0aGUtL2Vycm9yXG4gKiBAdmVyc2lvbiAxNS40LjBcbiAqIEBkZXNjcmlwdGlvbiBFcnJvciBmb3IgdGhlLWZyYW1ld29ya1xuICogQHR5cGljYWxuYW1lIGVycm9yXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBUaGVDb25mbGljdEVycm9yXyBmcm9tICcuL1RoZUNvbmZsaWN0RXJyb3InO1xuaW1wb3J0IFRoZUVycm9yXyBmcm9tICcuL1RoZUVycm9yJztcbmltcG9ydCBUaGVFeHBpcmVkRXJyb3JfIGZyb20gJy4vVGhlRXhwaXJlZEVycm9yJztcbmltcG9ydCBUaGVGb3JiaWRkZW5FcnJvcl8gZnJvbSAnLi9UaGVGb3JiaWRkZW5FcnJvcic7XG5pbXBvcnQgVGhlR29uZUVycm9yXyBmcm9tICcuL1RoZUdvbmVFcnJvcic7XG5pbXBvcnQgVGhlSW52YWxpZFBhcmFtZXRlckVycm9yXyBmcm9tICcuL1RoZUludmFsaWRQYXJhbWV0ZXJFcnJvcic7XG5pbXBvcnQgVGhlTm90QWNjZXB0YWJsZUVycm9yXyBmcm9tICcuL1RoZU5vdEFjY2VwdGFibGVFcnJvcic7XG5pbXBvcnQgVGhlTm90Rm91bmRFcnJvcl8gZnJvbSAnLi9UaGVOb3RGb3VuZEVycm9yJztcbmltcG9ydCBUaGVSZXF1ZXN0VGltZW91dEVycm9yXyBmcm9tICcuL1RoZVJlcXVlc3RUaW1lb3V0RXJyb3InO1xuaW1wb3J0IFRoZVNlcnZlclJvdHRlbkVycm9yXyBmcm9tICcuL1RoZVNlcnZlclJvdHRlbkVycm9yJztcbmltcG9ydCBUaGVVbmF1dGhvcml6ZWRFcnJvcl8gZnJvbSAnLi9UaGVVbmF1dGhvcml6ZWRFcnJvcic7XG5pbXBvcnQgY3JlYXRlXyBmcm9tICcuL2NyZWF0ZSc7XG5pbXBvcnQgZGVmaW5lXyBmcm9tICcuL2RlZmluZSc7XG5cbi8vIGBtb2R1bGUuZXhwb3J0c2Agb3ZlcnJpZGVzIHRoZXNlIGBleHBvcnRzLipgLCBidXQgc3RpbGwgbmVlZHMgdGhlbSBmb3IgbGViYWIgKGh0dHBzOi8vZ2l0aHViLmNvbS9sZWJhYi9sZWJhYilcbmV4cG9ydCB7VGhlQ29uZmxpY3RFcnJvcl8gYXMgVGhlQ29uZmxpY3RFcnJvcn07XG5cbmV4cG9ydCB7VGhlRXJyb3JfIGFzIFRoZUVycm9yfTtcbmV4cG9ydCB7VGhlRXhwaXJlZEVycm9yXyBhcyBUaGVFeHBpcmVkRXJyb3J9O1xuZXhwb3J0IHtUaGVGb3JiaWRkZW5FcnJvcl8gYXMgVGhlRm9yYmlkZGVuRXJyb3J9O1xuZXhwb3J0IHtUaGVHb25lRXJyb3JfIGFzIFRoZUdvbmVFcnJvcn07XG5leHBvcnQge1RoZUludmFsaWRQYXJhbWV0ZXJFcnJvcl8gYXMgVGhlSW52YWxpZFBhcmFtZXRlckVycm9yfTtcbmV4cG9ydCB7VGhlTm90QWNjZXB0YWJsZUVycm9yXyBhcyBUaGVOb3RBY2NlcHRhYmxlRXJyb3J9O1xuZXhwb3J0IHtUaGVOb3RGb3VuZEVycm9yXyBhcyBUaGVOb3RGb3VuZEVycm9yfTtcbmV4cG9ydCB7VGhlUmVxdWVzdFRpbWVvdXRFcnJvcl8gYXMgVGhlUmVxdWVzdFRpbWVvdXRFcnJvcn07XG5leHBvcnQge1RoZVNlcnZlclJvdHRlbkVycm9yXyBhcyBUaGVTZXJ2ZXJSb3R0ZW5FcnJvcn07XG5leHBvcnQge1RoZVVuYXV0aG9yaXplZEVycm9yXyBhcyBUaGVVbmF1dGhvcml6ZWRFcnJvcn07XG5leHBvcnQge2NyZWF0ZV8gYXMgY3JlYXRlfTtcbmV4cG9ydCB7ZGVmaW5lXyBhcyBkZWZpbmV9O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFRoZUNvbmZsaWN0RXJyb3I6IFRoZUNvbmZsaWN0RXJyb3JfLFxuICBUaGVFcnJvcjogVGhlRXJyb3JfLFxuICBUaGVFeHBpcmVkRXJyb3I6IFRoZUV4cGlyZWRFcnJvcl8sXG4gIFRoZUZvcmJpZGRlbkVycm9yOiBUaGVGb3JiaWRkZW5FcnJvcl8sXG4gIFRoZUdvbmVFcnJvcjogVGhlR29uZUVycm9yXyxcbiAgVGhlSW52YWxpZFBhcmFtZXRlckVycm9yOiBUaGVJbnZhbGlkUGFyYW1ldGVyRXJyb3JfLFxuICBUaGVOb3RBY2NlcHRhYmxlRXJyb3I6IFRoZU5vdEFjY2VwdGFibGVFcnJvcl8sXG4gIFRoZU5vdEZvdW5kRXJyb3I6IFRoZU5vdEZvdW5kRXJyb3JfLFxuICBUaGVSZXF1ZXN0VGltZW91dEVycm9yOiBUaGVSZXF1ZXN0VGltZW91dEVycm9yXyxcbiAgVGhlU2VydmVyUm90dGVuRXJyb3I6IFRoZVNlcnZlclJvdHRlbkVycm9yXyxcbiAgVGhlVW5hdXRob3JpemVkRXJyb3I6IFRoZVVuYXV0aG9yaXplZEVycm9yXyxcbiAgY3JlYXRlOiBjcmVhdGVfLFxuICBkZWZpbmU6IGRlZmluZV8sXG59O1xuIl19