// Code generated by coz. DO NOT EDIT.

/**
 * @module @the-/error
 * @version 15.4.0
 * @description Error for the-framework
 * @typicalname error
 * @license MIT
 */
'use strict';

var TheConflictError_ = require('./TheConflictError');

var TheError_ = require('./TheError');

var TheExpiredError_ = require('./TheExpiredError');

var TheForbiddenError_ = require('./TheForbiddenError');

var TheGoneError_ = require('./TheGoneError');

var TheInvalidParameterError_ = require('./TheInvalidParameterError');

var TheNotAcceptableError_ = require('./TheNotAcceptableError');

var TheNotFoundError_ = require('./TheNotFoundError');

var TheRequestTimeoutError_ = require('./TheRequestTimeoutError');

var TheServerRottenError_ = require('./TheServerRottenError');

var TheUnauthorizedError_ = require('./TheUnauthorizedError');

var create_ = require('./create');

var define_ = require('./define'); // `module.exports` overrides these `exports.*`, but still needs them for lebab (https://github.com/lebab/lebab)


exports.TheConflictError = TheConflictError_;
exports.TheError = TheError_;
exports.TheExpiredError = TheExpiredError_;
exports.TheForbiddenError = TheForbiddenError_;
exports.TheGoneError = TheGoneError_;
exports.TheInvalidParameterError = TheInvalidParameterError_;
exports.TheNotAcceptableError = TheNotAcceptableError_;
exports.TheNotFoundError = TheNotFoundError_;
exports.TheRequestTimeoutError = TheRequestTimeoutError_;
exports.TheServerRottenError = TheServerRottenError_;
exports.TheUnauthorizedError = TheUnauthorizedError_;
exports.create = create_;
exports.define = define_;
module.exports = {
  TheConflictError: TheConflictError_,
  TheError: TheError_,
  TheExpiredError: TheExpiredError_,
  TheForbiddenError: TheForbiddenError_,
  TheGoneError: TheGoneError_,
  TheInvalidParameterError: TheInvalidParameterError_,
  TheNotAcceptableError: TheNotAcceptableError_,
  TheNotFoundError: TheNotFoundError_,
  TheRequestTimeoutError: TheRequestTimeoutError_,
  TheServerRottenError: TheServerRottenError_,
  TheUnauthorizedError: TheUnauthorizedError_,
  create: create_,
  define: define_
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlRoZUNvbmZsaWN0RXJyb3JfIiwicmVxdWlyZSIsIlRoZUVycm9yXyIsIlRoZUV4cGlyZWRFcnJvcl8iLCJUaGVGb3JiaWRkZW5FcnJvcl8iLCJUaGVHb25lRXJyb3JfIiwiVGhlSW52YWxpZFBhcmFtZXRlckVycm9yXyIsIlRoZU5vdEFjY2VwdGFibGVFcnJvcl8iLCJUaGVOb3RGb3VuZEVycm9yXyIsIlRoZVJlcXVlc3RUaW1lb3V0RXJyb3JfIiwiVGhlU2VydmVyUm90dGVuRXJyb3JfIiwiVGhlVW5hdXRob3JpemVkRXJyb3JfIiwiY3JlYXRlXyIsImRlZmluZV8iLCJleHBvcnRzIiwiVGhlQ29uZmxpY3RFcnJvciIsIlRoZUVycm9yIiwiVGhlRXhwaXJlZEVycm9yIiwiVGhlRm9yYmlkZGVuRXJyb3IiLCJUaGVHb25lRXJyb3IiLCJUaGVJbnZhbGlkUGFyYW1ldGVyRXJyb3IiLCJUaGVOb3RBY2NlcHRhYmxlRXJyb3IiLCJUaGVOb3RGb3VuZEVycm9yIiwiVGhlUmVxdWVzdFRpbWVvdXRFcnJvciIsIlRoZVNlcnZlclJvdHRlbkVycm9yIiwiVGhlVW5hdXRob3JpemVkRXJyb3IiLCJjcmVhdGUiLCJkZWZpbmUiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7O0FBT0E7O0FBRUEsSUFBTUEsaUJBQWlCLEdBQUdDLE9BQU8sQ0FBQyxvQkFBRCxDQUFqQzs7QUFDQSxJQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUNBLElBQU1FLGdCQUFnQixHQUFHRixPQUFPLENBQUMsbUJBQUQsQ0FBaEM7O0FBQ0EsSUFBTUcsa0JBQWtCLEdBQUdILE9BQU8sQ0FBQyxxQkFBRCxDQUFsQzs7QUFDQSxJQUFNSSxhQUFhLEdBQUdKLE9BQU8sQ0FBQyxnQkFBRCxDQUE3Qjs7QUFDQSxJQUFNSyx5QkFBeUIsR0FBR0wsT0FBTyxDQUFDLDRCQUFELENBQXpDOztBQUNBLElBQU1NLHNCQUFzQixHQUFHTixPQUFPLENBQUMseUJBQUQsQ0FBdEM7O0FBQ0EsSUFBTU8saUJBQWlCLEdBQUdQLE9BQU8sQ0FBQyxvQkFBRCxDQUFqQzs7QUFDQSxJQUFNUSx1QkFBdUIsR0FBR1IsT0FBTyxDQUFDLDBCQUFELENBQXZDOztBQUNBLElBQU1TLHFCQUFxQixHQUFHVCxPQUFPLENBQUMsd0JBQUQsQ0FBckM7O0FBQ0EsSUFBTVUscUJBQXFCLEdBQUdWLE9BQU8sQ0FBQyx3QkFBRCxDQUFyQzs7QUFDQSxJQUFNVyxPQUFPLEdBQUdYLE9BQU8sQ0FBQyxVQUFELENBQXZCOztBQUNBLElBQU1ZLE9BQU8sR0FBR1osT0FBTyxDQUFDLFVBQUQsQ0FBdkIsQyxDQUVBOzs7QUFDQWEsT0FBTyxDQUFDQyxnQkFBUixHQUEyQmYsaUJBQTNCO0FBQ0FjLE9BQU8sQ0FBQ0UsUUFBUixHQUFtQmQsU0FBbkI7QUFDQVksT0FBTyxDQUFDRyxlQUFSLEdBQTBCZCxnQkFBMUI7QUFDQVcsT0FBTyxDQUFDSSxpQkFBUixHQUE0QmQsa0JBQTVCO0FBQ0FVLE9BQU8sQ0FBQ0ssWUFBUixHQUF1QmQsYUFBdkI7QUFDQVMsT0FBTyxDQUFDTSx3QkFBUixHQUFtQ2QseUJBQW5DO0FBQ0FRLE9BQU8sQ0FBQ08scUJBQVIsR0FBZ0NkLHNCQUFoQztBQUNBTyxPQUFPLENBQUNRLGdCQUFSLEdBQTJCZCxpQkFBM0I7QUFDQU0sT0FBTyxDQUFDUyxzQkFBUixHQUFpQ2QsdUJBQWpDO0FBQ0FLLE9BQU8sQ0FBQ1Usb0JBQVIsR0FBK0JkLHFCQUEvQjtBQUNBSSxPQUFPLENBQUNXLG9CQUFSLEdBQStCZCxxQkFBL0I7QUFDQUcsT0FBTyxDQUFDWSxNQUFSLEdBQWlCZCxPQUFqQjtBQUNBRSxPQUFPLENBQUNhLE1BQVIsR0FBaUJkLE9BQWpCO0FBRUFlLE1BQU0sQ0FBQ2QsT0FBUCxHQUFpQjtBQUNmQyxFQUFBQSxnQkFBZ0IsRUFBRWYsaUJBREg7QUFFZmdCLEVBQUFBLFFBQVEsRUFBRWQsU0FGSztBQUdmZSxFQUFBQSxlQUFlLEVBQUVkLGdCQUhGO0FBSWZlLEVBQUFBLGlCQUFpQixFQUFFZCxrQkFKSjtBQUtmZSxFQUFBQSxZQUFZLEVBQUVkLGFBTEM7QUFNZmUsRUFBQUEsd0JBQXdCLEVBQUVkLHlCQU5YO0FBT2ZlLEVBQUFBLHFCQUFxQixFQUFFZCxzQkFQUjtBQVFmZSxFQUFBQSxnQkFBZ0IsRUFBRWQsaUJBUkg7QUFTZmUsRUFBQUEsc0JBQXNCLEVBQUVkLHVCQVRUO0FBVWZlLEVBQUFBLG9CQUFvQixFQUFFZCxxQkFWUDtBQVdmZSxFQUFBQSxvQkFBb0IsRUFBRWQscUJBWFA7QUFZZmUsRUFBQUEsTUFBTSxFQUFFZCxPQVpPO0FBYWZlLEVBQUFBLE1BQU0sRUFBRWQ7QUFiTyxDQUFqQiIsInNvdXJjZVJvb3QiOiIuLi9saWIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb2RlIGdlbmVyYXRlZCBieSBjb3ouIERPIE5PVCBFRElULlxuLyoqXG4gKiBAbW9kdWxlIEB0aGUtL2Vycm9yXG4gKiBAdmVyc2lvbiAxNS40LjBcbiAqIEBkZXNjcmlwdGlvbiBFcnJvciBmb3IgdGhlLWZyYW1ld29ya1xuICogQHR5cGljYWxuYW1lIGVycm9yXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFRoZUNvbmZsaWN0RXJyb3JfID0gcmVxdWlyZSgnLi9UaGVDb25mbGljdEVycm9yJylcbmNvbnN0IFRoZUVycm9yXyA9IHJlcXVpcmUoJy4vVGhlRXJyb3InKVxuY29uc3QgVGhlRXhwaXJlZEVycm9yXyA9IHJlcXVpcmUoJy4vVGhlRXhwaXJlZEVycm9yJylcbmNvbnN0IFRoZUZvcmJpZGRlbkVycm9yXyA9IHJlcXVpcmUoJy4vVGhlRm9yYmlkZGVuRXJyb3InKVxuY29uc3QgVGhlR29uZUVycm9yXyA9IHJlcXVpcmUoJy4vVGhlR29uZUVycm9yJylcbmNvbnN0IFRoZUludmFsaWRQYXJhbWV0ZXJFcnJvcl8gPSByZXF1aXJlKCcuL1RoZUludmFsaWRQYXJhbWV0ZXJFcnJvcicpXG5jb25zdCBUaGVOb3RBY2NlcHRhYmxlRXJyb3JfID0gcmVxdWlyZSgnLi9UaGVOb3RBY2NlcHRhYmxlRXJyb3InKVxuY29uc3QgVGhlTm90Rm91bmRFcnJvcl8gPSByZXF1aXJlKCcuL1RoZU5vdEZvdW5kRXJyb3InKVxuY29uc3QgVGhlUmVxdWVzdFRpbWVvdXRFcnJvcl8gPSByZXF1aXJlKCcuL1RoZVJlcXVlc3RUaW1lb3V0RXJyb3InKVxuY29uc3QgVGhlU2VydmVyUm90dGVuRXJyb3JfID0gcmVxdWlyZSgnLi9UaGVTZXJ2ZXJSb3R0ZW5FcnJvcicpXG5jb25zdCBUaGVVbmF1dGhvcml6ZWRFcnJvcl8gPSByZXF1aXJlKCcuL1RoZVVuYXV0aG9yaXplZEVycm9yJylcbmNvbnN0IGNyZWF0ZV8gPSByZXF1aXJlKCcuL2NyZWF0ZScpXG5jb25zdCBkZWZpbmVfID0gcmVxdWlyZSgnLi9kZWZpbmUnKVxuXG4vLyBgbW9kdWxlLmV4cG9ydHNgIG92ZXJyaWRlcyB0aGVzZSBgZXhwb3J0cy4qYCwgYnV0IHN0aWxsIG5lZWRzIHRoZW0gZm9yIGxlYmFiIChodHRwczovL2dpdGh1Yi5jb20vbGViYWIvbGViYWIpXG5leHBvcnRzLlRoZUNvbmZsaWN0RXJyb3IgPSBUaGVDb25mbGljdEVycm9yX1xuZXhwb3J0cy5UaGVFcnJvciA9IFRoZUVycm9yX1xuZXhwb3J0cy5UaGVFeHBpcmVkRXJyb3IgPSBUaGVFeHBpcmVkRXJyb3JfXG5leHBvcnRzLlRoZUZvcmJpZGRlbkVycm9yID0gVGhlRm9yYmlkZGVuRXJyb3JfXG5leHBvcnRzLlRoZUdvbmVFcnJvciA9IFRoZUdvbmVFcnJvcl9cbmV4cG9ydHMuVGhlSW52YWxpZFBhcmFtZXRlckVycm9yID0gVGhlSW52YWxpZFBhcmFtZXRlckVycm9yX1xuZXhwb3J0cy5UaGVOb3RBY2NlcHRhYmxlRXJyb3IgPSBUaGVOb3RBY2NlcHRhYmxlRXJyb3JfXG5leHBvcnRzLlRoZU5vdEZvdW5kRXJyb3IgPSBUaGVOb3RGb3VuZEVycm9yX1xuZXhwb3J0cy5UaGVSZXF1ZXN0VGltZW91dEVycm9yID0gVGhlUmVxdWVzdFRpbWVvdXRFcnJvcl9cbmV4cG9ydHMuVGhlU2VydmVyUm90dGVuRXJyb3IgPSBUaGVTZXJ2ZXJSb3R0ZW5FcnJvcl9cbmV4cG9ydHMuVGhlVW5hdXRob3JpemVkRXJyb3IgPSBUaGVVbmF1dGhvcml6ZWRFcnJvcl9cbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlX1xuZXhwb3J0cy5kZWZpbmUgPSBkZWZpbmVfXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBUaGVDb25mbGljdEVycm9yOiBUaGVDb25mbGljdEVycm9yXyxcbiAgVGhlRXJyb3I6IFRoZUVycm9yXyxcbiAgVGhlRXhwaXJlZEVycm9yOiBUaGVFeHBpcmVkRXJyb3JfLFxuICBUaGVGb3JiaWRkZW5FcnJvcjogVGhlRm9yYmlkZGVuRXJyb3JfLFxuICBUaGVHb25lRXJyb3I6IFRoZUdvbmVFcnJvcl8sXG4gIFRoZUludmFsaWRQYXJhbWV0ZXJFcnJvcjogVGhlSW52YWxpZFBhcmFtZXRlckVycm9yXyxcbiAgVGhlTm90QWNjZXB0YWJsZUVycm9yOiBUaGVOb3RBY2NlcHRhYmxlRXJyb3JfLFxuICBUaGVOb3RGb3VuZEVycm9yOiBUaGVOb3RGb3VuZEVycm9yXyxcbiAgVGhlUmVxdWVzdFRpbWVvdXRFcnJvcjogVGhlUmVxdWVzdFRpbWVvdXRFcnJvcl8sXG4gIFRoZVNlcnZlclJvdHRlbkVycm9yOiBUaGVTZXJ2ZXJSb3R0ZW5FcnJvcl8sXG4gIFRoZVVuYXV0aG9yaXplZEVycm9yOiBUaGVVbmF1dGhvcml6ZWRFcnJvcl8sXG4gIGNyZWF0ZTogY3JlYXRlXyxcbiAgZGVmaW5lOiBkZWZpbmVfLFxufVxuIl19